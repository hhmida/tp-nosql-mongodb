{"config": {"lang": ["en", "fr"], "separator": "[\\s\\-\\.]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "index.html", "title": "Introduction", "text": ""}, {"location": "index.html#bases-de-donnees-nosql-avec-mongodb", "title": "Bases de Donn\u00e9es NoSQL avec MongoDB", "text": ""}, {"location": "index.html#objectifs", "title": "Objectifs", "text": "<ul> <li>Installer MongoDB et cr\u00e9er une base de donn\u00e9es</li> <li>Interroger une base de donn\u00e9es orient\u00e9e document</li> <li>Prot\u00e9ger la base de donn\u00e9es contre les pannes avec le ReplicaSet</li> <li>Passer \u00e0 l'\u00e9chelle avec le Sharding</li> </ul>"}, {"location": "index.html#ressources", "title": "Ressources", "text": "<p>Outils</p> <ul> <li>MongoDB Community Server V4.4.1 (Windows 10) ou V4.0.2 (Windows 7 ou 8)</li> <li>MongoDB Shell V0.4.2 (Ex\u00e9cuter des commandes int\u00e9ractives)</li> <li>MongoCompass V1.22.1 (GUI pour MongoDB)</li> </ul> <p>Fichiers de donn\u00e9es (datasets)</p> <ul> <li>restaurants.json: 25359 restaurants de New York</li> <li>cities.csv: 15000 villes du monde</li> </ul> <p>Sources et r\u00e9f\u00e9rence</p> <ul> <li>Documentation MongoDB</li> <li>Tutorial MongoDB Sharding sous Windows</li> <li>Ma\u00eetrisez les bases de donn\u00e9es NoSQL Openclassrooms</li> </ul>"}, {"location": "index.html#presentation-de-mongodb", "title": "Pr\u00e9sentation de MongoDB", "text": ""}, {"location": "index.html#vocabulaire", "title": "Vocabulaire", "text": "<p>MongoDB est un syst\u00e8me de gestion de bases de donn\u00e9es NoSQL orient\u00e9 documents. Il est parmi les SGBD les plus utilis\u00e9s. </p> <p>Source : https://db-engines.com/en/ranking_trend</p> <p>Le document est l'unit\u00e9 de r\u00e9f\u00e9rence dans ce syst\u00e8me. Elle est l'\u00e9quivalent de tuple ou enregistrement dans les bases de donn\u00e9es relationnelles. MongoDB g\u00e8re plusieurs bases de donn\u00e9es. Chaque base est compos\u00e9e de Collections (\u00e9quivalent de table).  La struture d'un document MongoDB ressemb\u00e9e \u00e0 celle de JSON. Le mod\u00e8le est tr\u00e8s simple :</p> <ul> <li>Tout est cl\u00e9/valeur : \"cl\u00e9\" : \"valeur\".</li> <li>Un document est encapsul\u00e9 dans des accolades {...}, pouvant contenir des listes de cl\u00e9s/valeurs.</li> <li>Une valeur peut \u00eatre un type scalaire (entier, nombre, texte, bool\u00e9en, null), des listes de valeurs [...], ou des documents imbriqu\u00e9s.</li> </ul> Sch\u00e9ma de la base MongoDB <p>MongoDB ne g\u00e8re aucun sch\u00e9ma pour les collections. Donc pas de structure fixe ni de typage. Du coup, il est difficile lors de l\u2019interrogation de conna\u00eetre le contenu de la base de donn\u00e9es. Le logiciel Compass permet de faire une analyse du sch\u00e9ma et fournit des statistiques sur les types des cl\u00e9s et les fr\u00e9quences des valeurs.</p> Exemple de document MongoDB <p><pre><code>  {\n    \"_id\":{\n      \"$oid\":\"5f7cefe98c3d2e2bd862b3ff\"\n    },\n    \"address\":{\n      \"building\":\"469\",\n      \"coord\":{\n        \"type\":\"Point\",\n        \"coordinates\":[-73.961704,40.662942]\n      },\n      \"street\":\"Flatbush Avenue\",\n      \"zipcode\":\"11225\"\n    },\n    \"borough\":\"Brooklyn\",\n    \"cuisine\":\"Hamburgers\",\n    \"grades\":[\n      {\"date\":{\"$date\":\"2014-12-30T00:00:00.000Z\"},\"grade\":\"A\",\"score\":8},\n      {\"date\":{\"$date\":\"2014-07-01T00:00:00.000Z\"},\"grade\":\"B\",\"score\":23},\n      {\"date\":{\"$date\":\"2013-04-30T00:00:00.000Z\"},\"grade\":\"A\",\"score\":12},\n      {\"date\":{\"$date\":\"2012-05-08T00:00:00.000Z\"},\"grade\":\"A\",\"score\":12}\n    ],\n    \"name\":\"Wendy'S\",\n    \"restaurant_id\":\"30112340\"\n  }\n</code></pre> Ce restaurant a un nom, un quartier (borough), le type de cuisine, une adresse (document imbriqu\u00e9, avec coordonn\u00e9es GPS, rue et code postale), et un ensemble de notes (tableaux de documents).</p> Note <p>La cl\u00e9 \"_id:\" est l'identifiant du document. Si sa valeur n'est pas sp\u00e9cifi\u00e9e implicitement lors de l'insertion, elle est automatiquement initialis\u00e9e par MongoDB.</p>"}, {"location": "advanced.html", "title": "Op\u00e9rations avanc\u00e9es", "text": ""}, {"location": "advanced.html#operations-avancees", "title": "Op\u00e9rations avanc\u00e9es", "text": ""}, {"location": "advanced.html#agregations", "title": "Agr\u00e9gations", "text": ""}, {"location": "advanced.html#fonction-aggregate", "title": "Fonction aggregate", "text": "<p>MongoDB fournit la fonction aggregate qui permet de cr\u00e9er un pipeline (s\u00e9quence) d'op\u00e9rations ou stage (\u00e9tape). Elle poss\u00e8de 2 param\u00e8tres : un tableau d'op\u00e9rations et JSON optionnel pour les options d'ex\u00e9cution.</p> aggregate <pre><code>&gt; db.collection.aggregate([\n  {operation1:{}},\n  {operation2:{}}, ...\n],\n{\n  option1:value, \n  option2:value, ...\n}\n);\n</code></pre>"}, {"location": "advanced.html#operateurs-dagregation-stages", "title": "Op\u00e9rateurs d'agr\u00e9gation (stages)", "text": ""}, {"location": "advanced.html#operateurs-simples", "title": "Op\u00e9rateurs simples", "text": "<p><code>{$match: {&lt;query&gt;}}</code> : C\u2019est une op\u00e9ration de filtrage exactement comme le premier param\u00e8tre de la requ\u00eate find.</p> <p><code>{$project: {champ1:1|0, ...}}</code> : C\u2019est le second param\u00e8tre du find. Il donne le format de sortie des documents (projection). Il peut par ailleurs \u00eatre utilis\u00e9 pour changer le format d\u2019origine.</p> <p><code>{$sort: {champ1:1|-1,....}}</code> : Trier le r\u00e9sultat final sur les valeurs d\u2019une cl\u00e9 choisi.</p> <p>Exemples</p> Exemple1 <p>Afficher le nom et l'adresse des restaurants dont le nom comporte \"Staten Island\".</p> MongoDBSQL <pre><code>  //avec find\n  &gt; db.restaurants.find({name:/Staten Island/},\n    {_id:0, name:1, address:1}\n  );\n  //avec aggregate\n  &gt; db.restaurants.aggregate([\n    {$match:{name:/Staten Island/}},\n    {$project: {_id:0, name:1, address:1}}\n  ]);\n</code></pre> <pre><code>  SELECT name, address \n  FROM restaurants \n  WHERE name like '%Staten Island%'\n</code></pre> <p>Trier le r\u00e9sultat selon l'ordre d\u00e9croissant du nom.</p> MongoDBSQL <pre><code>  &gt; db.restaurants.aggregate([\n    {$match:{name:/Staten Island/}},\n    {$project: {_id:0, name:1, address:1}},\n    {$sort:{name:-1}}\n  ]);\n</code></pre> <pre><code>  SELECT name, address \n  FROM restaurants \n  WHERE name like '%Staten Island%'\n  ORDER BY name DESC\n</code></pre> <p>Trier le r\u00e9sultat selon l'ordre d\u00e9croissant du nom.</p>"}, {"location": "advanced.html#groupage-et-agregats", "title": "Groupage et agr\u00e9gats", "text": "<p><code>{$group: {_id: &lt;expression&gt;, &lt;champAgr\u00e9g\u00e91&gt;: { &lt;accumulator1&gt; : &lt;expression1&gt; },...}}</code> : C\u2019est l\u2019op\u00e9ration d\u2019agr\u00e9gation. Il va permettre de grouper les documents par valeur, et appliquer des fonctions d\u2019agr\u00e9gat. La sortie est une nouvelle collection avec les r\u00e9sultats de l\u2019agr\u00e9gation. _id est le champ du groupement (pr\u00e9c\u00e9der le nom du champ valeur par $). accumulateur1 est une fonction d'agr\u00e9gation : $min, $max, $sum, $avg</p> <p><code>{$unwind : &lt;$champTableau&gt;}</code> : Cr\u00e9e n documents \u00e0 partir d'un tableau.  Il peut \u00eatre consid\u00e9r\u00e9 comme une jointure entre le document en cours de collection et le champ tableau. Le nom du champ est pr\u00e9c\u00e9d\u00e9 par $. </p> Exemple2 <p>Calculer le nombre de restaurants total.</p> MongoDBSQL <pre><code>  &gt; db.restaurants.aggregate([\n    {\n      $group:{_id:null, Total:{$sum:1}}\n    }\n  ]);\n</code></pre> <pre><code>  SELECT count * as Total\n  FROM restaurants \n</code></pre> <p>Calculer le nombre de restaurants total par quartier.</p> MongoDBSQL <pre><code>  &gt; db.restaurants.aggregate([\n    {\n      $group:{_id:\"$borough\", Total:{$sum:1}}\n    }\n  ]);\n</code></pre> <pre><code>  SELECT borough, count * as Total \n  FROM restaurants\n  GROUP BY borough \n</code></pre> <p>Calculer le score moyen des restaurants dont le nom contient \"Staten Island\". Puisque le score est dans le tableau grades, il faut transformer ce tableau avec $unwind. Chaque stage du pipeline peut \u00eatre sauvegard\u00e9 dans une variable pour \u00eatre utilis\u00e9 dans plusieurs requ\u00eates.</p> MongoDBSQL <pre><code>  &gt; var filtrage = {$match:{name:/Staten Island/}};\n  &gt; var decomposerGrades = {$unwind : \"$grades\"};\n  &gt; var groupage = {$group:{_id:\"$_id\",\"Score moyen\": {$avg:\"$grades.score\"}}};\n  &gt; db.restaurants.aggregate([ filtrage, decomposerGrades, groupage]);\n</code></pre> <p>On suppose que grades est un table pr\u00e9sente dans la base de donn\u00e9es. <pre><code>  SELECT _id, AVG(grades.score) \"Score moyen\"\n  FROM restaurants JOIN grades\n  WHERE name like '%Staten Island%'\n  GROUP BY (_id)\n</code></pre></p>"}, {"location": "advanced.html#jointure", "title": "Jointure", "text": "<p>Nous pr\u00e9sentons ici la syntaxe la plus simple pour une \u00e9qui-jointure.</p> <p><code>{$lookup: {from: &lt;collection2&gt;, localField: &lt;champInterne&gt;,foreignField: &lt;chamCollection2&gt;, as: &lt;nouveauChampTableau&gt;}}</code> : Cet op\u00e9rateur effectue une jointure (left outer join) avec une autre collection de la base.</p> Exemple3 <p>Soit une collection des managers des restaurants \u00e0 laquelle on ins\u00e8re un document : <pre><code>&gt; db.createCollection(\"managers\");\n&gt; db.managers.insert({name:\"Alain Delon\",age:50,res_id:\"30075445\"});\n</code></pre> Effectuer la jointure entre managers et restaurants</p> MongoDBSQL <pre><code>  &gt; db.managers.aggregate([\n    {\n      $lookup:{\n        from:\"restaurants\",\n        localField:\"res_id\",\n        foreignField:\"restaurant_id\",\n        as:\"Restaurant\"\n      }\n    }\n  ]);\n</code></pre> <pre><code>  SELECT *, Restaurant \n  FROM managers\n  WHERE Restaurant in (SELECT *\n                      FROM restaurants\n                      WHERE restaurant_id = res_id)\n</code></pre>"}, {"location": "advanced.html#sortie", "title": "Sortie", "text": "<p><code>{$out: &lt;collection&gt; | {db:&lt;base&gt;, coll:&lt;collection}}</code> : Cet op\u00e9rateur sp\u00e9cifie la base et la collection o\u00f9 le r\u00e9sultat sera ins\u00e9r\u00e9.</p> Exemple 4 <p>Pour enregistrer le r\u00e9sultat de la premi\u00e8re requ\u00eate de l'exemple 1.</p> MongoDBSQL <pre><code>  &gt; db.restaurants.aggregate([\n    {$match{name:/Staten Island/},\n    {$project: {_id:0, name:1, address:1}},\n    {$out:\"staten\"}\n  ]);\n</code></pre> <pre><code>  CREATE TABLE staten AS( \n    SELECT name, address \n    FROM restaurants \n    WHERE name like '%Staten Island%'\n  );\n</code></pre>"}, {"location": "crud.html", "title": "Op\u00e9rations de base", "text": ""}, {"location": "crud.html#operations-de-base", "title": "Op\u00e9rations de base", "text": ""}, {"location": "crud.html#format-des-commandes-mongodb", "title": "Format des commandes MongoDB", "text": "Format des appels <pre><code>  //Appel d'op\u00e9ration sur la base en cours\n  &gt; db.operation();\n\n  //Appel d'op\u00e9ration sur la collection\n  &gt; db.collection.operation();\n</code></pre>"}, {"location": "crud.html#manipulation-des-bases-de-donnees", "title": "Manipulation des bases de donn\u00e9es", "text": ""}, {"location": "crud.html#lister-les-bases", "title": "Lister les bases", "text": "show <p>Voir les bases existantes</p> <pre><code>  &gt; show dbs\n</code></pre> <p>Pour voir la base s\u00e9lectionn\u00e9e</p> <pre><code>  &gt; db\n</code></pre>"}, {"location": "crud.html#selectionner-ou-creer-une-bd", "title": "S\u00e9lectionner ou cr\u00e9er une BD", "text": "<p>C'est la base qui sera active et repr\u00e9sente par le pr\u00e9fixe db. Toutes les op\u00e9rations ex\u00e9cut\u00e9es ensuite sont ex\u00e9cut\u00e9es sur cette base.  </p> use <pre><code>  &gt; use nom_base\n</code></pre> Example <p>Cr\u00e9er une base bibliotheque</p> <pre><code>  &gt; use bibliotheque\n</code></pre>"}, {"location": "crud.html#supprimer-la-base-de-donnees-en-cours", "title": "Supprimer la base de donn\u00e9es en cours", "text": "dropDatabse <pre><code>  &gt; db.dropDatabse();\n</code></pre> Afficher la liste des op\u00e9rations sur une BD <pre><code>  &gt; db.help();\n</code></pre>"}, {"location": "crud.html#les-collections-de-la-base-en-cours", "title": "Les collections de la base en cours", "text": "Cr\u00e9ation de collection <pre><code>  &gt; db.createCollection(\"nom\")\n</code></pre> Exemple <p>Cr\u00e9er une collection livres</p> <pre><code>&gt; db.createCollection(\"livres\");\n</code></pre> Lister les collections <pre><code>  &gt; show collections\n</code></pre> Supprimer une collection <pre><code>  &gt; db.nom_collection.drop();\n</code></pre>"}, {"location": "crud.html#insertion-de-documents", "title": "Insertion de documents", "text": "<p>Un document est ins\u00e9r\u00e9 dans une collection. Il est possible d'utiliser les m\u00e9thodes insert(), insertOne() ou insertMany().</p> Exemple <pre><code>&gt; db.livres.insert({\n  \"Titre\":\"Mongodb: the definitive guide, 2nd edition\",\n  \"Cat\u00e9gorie\":\"Informatique\",\n  \"Pages\":434,\n  \"Ann\u00e9e\":2013,\n  \"Prix\":42.73,\n  \"R\u00e9sum\u00e9\":\"This updated second edition provides guidance for database developers, \n  advanced configuration for system administrators, and an overview of the concepts \n  and use cases for other people on your project.\",\n  \"Langue\":\"EN\",\n  \"ISBN\":9781449344689,\n  \"Editeur\":{\"Nom\":\"\",\"Pays\":\"\"},\n  \"Auteurs\":[{\"Nom\":\"Chodorow\",\"Pr\u00e9nom\":\"Kristina\"}],\n  \"Mots cl\u00e9s\":[\"MongoDB\",\"NoSQL\",\"Database\"]\n});\n</code></pre> <p>Exercice Ajouter le livre ayant cette couverture :  </p> <p></p> Note <ul> <li>MongoDB associe un identifiant unique \u00e0 chaque document appel\u00e9  _id, et lui attribue une valeur si elle n\u2019est pas indiqu\u00e9e explicitement.</li> <li>MongoDB ne fait aucun contr\u00f4le de structure ou autres contraintes sur les donn\u00e9es. Ces contr\u00f4les seront r\u00e9alis\u00e9es.</li> </ul>"}, {"location": "crud.html#importation-de-donnees", "title": "Importation de donn\u00e9es", "text": ""}, {"location": "crud.html#avec-compass", "title": "Avec Compass", "text": "<p>Pour alimenter la base avec des donn\u00e9es existantes dans un format support\u00e9 (JSON, CSV, TSV), utiliser Compass.</p> <ol> <li>T\u00e9l\u00e9charger restaurants.json et d\u00e9compresser son contenu.</li> <li>Cr\u00e9er une base de donn\u00e9es \"emplacements\".</li> <li>Cr\u00e9er une collection \"restaurants\".</li> <li>S\u00e9lectionner la collection \"restaurants\" et cliquer sur le bouton \"Add data\" puis Import file.</li> <li>S\u00e9lectionner le fichier restaurants.json et importer.</li> </ol>"}, {"location": "crud.html#avec-mongoimport", "title": "Avec mongoimport", "text": "<ol> <li>T\u00e9l\u00e9charger restaurants.json et d\u00e9compresser son contenu.</li> <li>Copier le fichier restaurants.json vers le container : <code>docker cp restaurants.json mongodb:/</code></li> <li>Se connecter au container : <code>docker exec -it mongodb bash</code></li> <li>Lancer <code>mongosh</code> et cr\u00e9er :   a. Une base de donn\u00e9es \"emplacements\".   a. Une collection \"restaurants\".</li> <li>Quitter mongosh et importer le fichier restaurants.json avec la commande :</li> </ol> <pre><code>mongoimport -d emplacements -c restaurants /restaurants.json\n</code></pre>"}, {"location": "crud.html#interrogation", "title": "Interrogation", "text": "<p>C'est la m\u00e9thode find() qui r\u00e9alise l'interrogation dans MongoDB. Les requ\u00eates seront effectu\u00e9es sur la base de donn\u00e9es des restaurants import\u00e9e pr\u00e9c\u00e9demment : <code>use emplacements</code></p>"}, {"location": "crud.html#format-de-la-methpde-find", "title": "Format de la m\u00e9thpde find()", "text": "<p>find poss\u00e8de 2 param\u00e8tres optionnels repr\u00e9sent\u00e9s \u00e9galement en format JSON. Le premier repr\u00e9sente la requ\u00eate de filtrage (clause WHERE en SQL). Le second param\u00e8tre exprime l'op\u00e9ration la projection.</p> find <pre><code>  &gt; db.collection.find(query, projection);\n</code></pre>"}, {"location": "crud.html#projection", "title": "Projection", "text": "<pre><code>  {cl\u00e9:&lt;0,1&gt;}\n</code></pre> <p>0 : exclusion, 1 : inclusion</p> <ul> <li>L'identifiant _id est implicitement inclus dans le r\u00e9sultat. Pour l'exclure, ajouter _id:0.</li> <li>Il n'est pas possible de m\u00e9langer inclusions et exclusions sauf pour le champ _id.</li> <li>Pour acc\u00e9der \u00e0 un champ d'un document imbriqu\u00e9, utiliser . : champ1.champ2.</li> </ul> Exemples <p>Afficher les noms des restaurants et leurs sp\u00e9cialit\u00e9s (cuisine).</p> MongoDBSQL <pre><code>  &gt; db.restaurants.find({},{name:1, cuisine:1});\n</code></pre> <pre><code>  SELECT name, cuisine FROM restaurants\n</code></pre> <p>Afficher tous les noms des restaurants et la rue (street) et pas le  _id.</p> MongoDBSQL <pre><code>  &gt; db.restaurants.find({},{name:1, \"address.street\":1, _id:0});\n</code></pre> <pre><code>  SELECT name, street FROM restaurants\n</code></pre>"}, {"location": "crud.html#contenu-de-collection", "title": "Contenu de collection", "text": "<p>find() affiche le contenu de la collection tandis que count() retourne le nombre de documents de la collection.</p> Exemple MongoDBSQL <pre><code>  &gt; db.restaurants.find()\n  &gt; db.restaurants.count()\n</code></pre> <pre><code>  SELECT * FROM restaurants\n  SELECT count(*) FROM restaurants\n</code></pre>"}, {"location": "crud.html#selection", "title": "S\u00e9lection", "text": "<p>Par valeur exacte La condition d'\u00e9galit\u00e9 est exprim\u00e9e par <code>champ:valeur</code>.</p> Exemples <p>Trouver les restaurants du quartier Brooklyn.</p> MongoDBSQL <pre><code>  &gt; db.restaurants.find( { \"borough\" : \"Brooklyn\" } );\n</code></pre> <pre><code>  SELECT * FROM restaurants WHERE borough = 'Brooklyn'\n</code></pre> <p>Trouver les restaurants du quartier Brooklyn offrant la cuisine italienne.</p> MongoDBSQL <pre><code>  &gt; db.restaurants.find( { \"borough\" : \"Brooklyn\", \"cuisine\":\"Italian\" } )\n</code></pre> <p><code>SQL   SELECT * FROM restaurants WHERE borough = 'Brooklyn' and cuisine = 'Italian'</code></p> <p>Trouver les restaurants sans nom (null).</p> MongoDBSQL <pre><code>  &gt; db.restaurants.find( { \"name\" : null } );\n</code></pre> <pre><code>  SELECT * FROM restaurants WHERE name IS NULL\n</code></pre> <p>Expressions r\u00e9guli\u00e8res</p> <p>Avec les champs de type texte, MongoDB accepte les expressions r\u00e9guli\u00e8res sous le format <code>\"champ\":/regex/options</code>.</p> Option Description i insensible \u00e0 la casse. m Multiligne. Exemples <p>Trouver les restaurants dont le nom contient <code>Pizza</code> sans prendre en compte la casse.</p> MongoDBSQL <pre><code>  &gt; db.restaurants.find( { \"name\" : /pizza/i});\n</code></pre> <pre><code>  SELECT * FROM restaurants WHERE upper(name) like '%PIZZA%'\n</code></pre> <p>Trouver les restaurants dont le nom commence par 'A'.</p> MongoDBSQL <pre><code>  &gt; db.restaurants.find( { \"name\" : /^A/});\n</code></pre> <pre><code>  SELECT * FROM restaurants WHERE name like 'A%'\n</code></pre> <p>Trouver les restaurants dont le nom est compos\u00e9 de 7 caract\u00e8res.</p> MongoDBSQL <pre><code>  &gt; db.restaurants.find( { \"name\" : /^.{7}$/});\n</code></pre> <pre><code>  SELECT * FROM restaurants WHERE name like '_______'\n</code></pre>"}, {"location": "crud.html#filtrage-avec-operateurs", "title": "Filtrage avec op\u00e9rateurs", "text": "<p>Pour construire les crit\u00e8res de s\u00e9lection, plusieurs op\u00e9rateurs peuvent \u00eatre utilis\u00e9s dans la requ\u00eate selon le format : <code>{champ1:{&lt;op\u00e9rateur&gt;:&lt;valeur1&gt;, ...}</code></p> <p>Les op\u00e9rateurs </p> Op\u00e9rateur R\u00f4le Exemple $gt, $gte &gt;,&gt;= <code>\"champ\":{\"$gt\":10}</code> $lt, $lte &lt;,&lt;= <code>\"champ\":{\"$lt\":10}</code> $ne != <code>\"champ\":{\"$ne\":10}</code> $in, $nin IN, NOT IN <code>\"champ\":{\"$in\":[10,20,30]}</code> $or ou  logique <code>\"$or\":[{\"champ\":{\"$gt\":10}},{\"champ\":{\"$lt\":5}}]</code> $and et logique <code>\"$and\":[{\"champ\":{\"$gt\":10}},{\"champ\":{\"$lt\":5}}]</code> $not n\u00e9gation <code>\"champ\":{\"$not\":{\"$gt\":10}}</code> $exists Existence de la cl\u00e9 dans le document <code>\"champ\":{\"$exists\":1}</code> $size taille d'une champ array <code>\"champTableau\":{\"$size\":5}</code> $elemMatch v\u00e9rification conjointe de plusieurs conditions sur un \u00e9l\u00e9ment du tableau <code>\"champTableau\":{$elemMatch:{\"champInterne\":{$gt:5}}}</code> <p>Exemples </p> Exemple 1 <p>Trouver les noms et scores des restaurants de Manhattan ayant re\u00e7u au moins un score inf\u00e9rieur \u00e0 10.</p> MongoDB <pre><code>  &gt; db.restaurants.find( {\n    borough:\"Manhattan\",\n    \"grades.score\":{\"$lt\":10}\n  }, \n  {name:1,\"grades.score\":1, _id:0});\n</code></pre> Exemple 2 <p>Trouver les noms et scores des restaurants de Manhattan avec des scores tous inf\u00e9rieur \u00e0 10.</p> MongoDB <pre><code>  &gt; db.restaurants.find( {\n    borough:\"Manhattan\",\n    \"grades.score\":{$not:{\"$gte\":10}}\n  }, \n  {name:1,\"grades.score\":1, _id:0});\n</code></pre> Exemple 3 <p>Trouver les restaurants qui ont une \u00e9valuation ayant un grade \u2018C\u2019 avec un score inf\u00e9rieur \u00e0 40.</p> MongoDB <pre><code>  &gt; db.restaurants.find({\n    \"grades\" :{\n      $elemMatch :{\n        \"grade\" : \"C\",\n        \"score\" : {$lt :40}\n      }\n    }\n  },\n  {\"grades.grade\":1,\"grades.score\":1, _id:0});\n</code></pre> <p>$elemMatch permet de v\u00e9rifier les conditions sur le m\u00eame \u00e9l\u00e9ment du tableau. Sans cet op\u00e9rateur on obtient des \u00e9valuations avec des scores diff\u00e9rents de 30 ou des grades diff\u00e9rents de C. V\u00e9rifier les r\u00e9sultats de la requ\u00eate sans elemMatch :</p> <pre><code>  &gt; db.restaurants.find({\n    \"grades.grade\" : \"C\",\n    \"grades.score\" : {$lt : 30}\n  },\n  {\"grades.grade\":1, \"grades.score\":1});\n</code></pre> Exemple 4 <p>Trouver les restaurants qui ont une exactement 4 \u00e9valuations.</p> MongoDB <pre><code>  &gt; db.restaurants.find({\n    \"grades\" :{$size:4}\n  });\n</code></pre> Exemple 5 <p>Trouver les restaurants qui ont une longitude (la premi\u00e8re valeur de coordinates) &lt; -100.</p> MongoDB <pre><code>  &gt; db.restaurants.find({\n    \"address.coord.coordinates.0\" :{$lt:-100}\n  });\n</code></pre> <p>Distinct Pour d\u00e9terminer les valeurs distinctes d'un champ.  </p> Exemples <p>Trouver les diff\u00e9rents quartiers.</p> MongoDBSQL <pre><code>  &gt; db.restaurants.distinct(\"borough\");\n</code></pre> <pre><code>  SELECT distinct borough FROM restaurants\n</code></pre> <p>Trouver l'intervalle des scores.</p> MongoDB <pre><code>  &gt; db.restaurants.distinct(\"grades.score\");\n</code></pre>"}, {"location": "crud.html#mise-a-jour", "title": "Mise \u00e0 jour", "text": "Update <pre><code>  &gt; db.collection.update(\n    {filtre},\n    {\n      &lt;op\u00e9rateurUpdate&gt;:{&lt;champ1&gt;:&lt;valeur1&gt;,....},\n      &lt;op\u00e9rateurUpdate&gt;:{&lt;champ1&gt;:&lt;valeur1&gt;,....},\n      ....\n    },\n    {\n      \"multi\":true|false, //mise \u00e0 jour de plusieurs documents - par d\u00e9faut false\n      \"upsert\":true|false //insertion si aucun document ne correspond - par d\u00e9faut false\n    }\n  );\n</code></pre> <p>Op\u00e9rateurs de mise \u00e0 jour</p> Op\u00e9rateur Description Exemple $currentDate Affecter \u00e0 un champ la date en cours <code>$currentDate:{\"champ\":true}</code> $inc, $mul Incr\u00e9menter resp. multiplier la valeur d'un champ par une valeur <code>$inc:{\"champ\":5}</code> $min, $max Modifie le champ si la nouvelle valeur est inf\u00e9rieure resp. sup\u00e9rieure \u00e0 la valeur actuelle. <code>$min:{\"champ\":10}</code> $rename Renommer un champ. <code>$rename:{\"champ\":\"nouveauChamp\"}</code> $set Affecte une valeur au champ sp\u00e9cifi\u00e9 et l'ajoute s'il n'existe pas. <code>$set:{\"champ\":2}</code> $unset Supprime le champ du document. <code>$unset:{\"champ\":\"\"}</code> $pop Supprime le premier ou dernier \u00e9l\u00e9ment d'un champ tableau. <code>$pop:{\"champTableau\":-1}</code> -1: premier, 1:dernier $pull Supprime les \u00e9l\u00e9ments qui v\u00e9rifient la condition. <code>$pull:{\"champTableau\":condition}</code> $push Ajoute un ou plusieurs \u00e9l\u00e9ments au tableau \u00e0 une position. <code>$push:{\"champTableau\":{$each:[valeur1, valeur2,...], $position: positionInsertion}}</code> <p>Exemples </p> Exemple 1 <p>Modifier le champ borough en 'Manhattan' et affecter la date actuelle au champ lastupdate du restaurant appel\u00e9 \"The Movable Feast\".</p> MongoDBSQL <pre><code>  &gt; db.restaurants.update(\n    {\"name\":\"The Movable Feast\"},\n    {\n      $set:{\"borough\":\"Manhattan\"},\n      $currentDate:{\"lastUpdated\":true}\n    }\n  );\n</code></pre> <pre><code>  UPDATE restaurants \nSET \n  borough = 'Manhattan', \n  lastUpdated = sysdate, \nWHERE name = 'The Movable Feast'\n</code></pre> Exemple 2 <p>Supprimer le champ cuisine et ajouter 2 point au premier score  du restaurant \"The Movable Feast\"</p> MongoDB <pre><code>  &gt; db.restaurants.update(\n    {\"name\":\"The Movable Feast\"},\n    {\n      $unset:{\"cuisine\":\"\"},\n      $inc:{\"grades.0.score\":2},\n    }\n  );\n</code></pre> Exemple 3 <p>Ajouter un commentaire avec la valeur acceptable pour les restaurants qui n'ont pas eu le grade 'C'.</p> MongoDB <pre><code>  &gt; db.restaurants.update (\n    {\"grades.grade\" : {$not : {$eq : \"C\"}}},\n    {$set : {\"comment\" : \"acceptable\"}},\n    {\"multi\" : true}\n  );\n</code></pre> <p>Exercice Donner la commande qui permet d'annuler celle de l'exemple 2.</p>"}, {"location": "crud.html#suppression", "title": "Suppression", "text": "Remove <pre><code>  &gt; db.collection.remove(\n    {filtre},\n    {justOne:true|false} //Optionnel par d\u00e9faut false\n  );\n</code></pre> Exemple <p>Supprimer tous les restaurants dont le nom commence par M.</p> MongoDBSQL <pre><code>  &gt; db.restaurants.remove({name:/^M.*/});\n</code></pre> <pre><code>  DELETE  FROM restaurants WHERE name like 'M%';\n</code></pre>"}, {"location": "exercice.html", "title": "Exercices", "text": ""}, {"location": "exercice.html#exercice-1", "title": "Exercice 1", "text": "<p>R\u00e9pondre aux questions suivantes :</p> <ol> <li>Quels restaurants contiennent des chiffres dans leurs noms ?</li> <li>Quels sont les noms et identifiants (restaurant_id) des restaurants qui n'ont pas re\u00e7u de score &gt; 6?</li> <li>Chercher pour chaque restaurant son score minimal et maximal tri\u00e9s par le score minimal croissant puis le score maximal d\u00e9croissant.</li> <li>Comment enregistrer la r\u00e9ponse de la question 2 dans une collection appel\u00e9e \"q2\".</li> <li>Ajouter l'adresse \u00e0 chaque restaurant de cette collection.</li> </ol>"}, {"location": "exercice.html#exercice-2", "title": "Exercice 2", "text": "<ul> <li>Cr\u00e9er une bases de donn\u00e9es portant le nom \"meteo\".</li> <li>Importer, avec Compass, le fichier weather_tunisie.json dans une collection appel\u00e9e \u00abtunisie\u00bb. (Cliquer sur le lien pour t\u00e9l\u00e9charger le fichier). La structure des documents est la suivante\u00a0:  <pre><code>{\n    \"_id\":{\"$oid\":\"61b665de7e8b7517e3d478bd\"},\n    \"lat\":33.5444, //latitude\n    \"lon\":9.9716, //longitude\n    \"daily\":[  //les pr\u00e9visions de 8 jours \u00e0 partir d\u2019aujourd\u2019hui, chacune contient les informations suivantes\u00a0:\n        {\n            \"dt\":{\"$date\":\"2021-12-12T12:00:00.000Z\"}, //date de la pr\u00e9vision\n            \"sunrise\":{\"$date\":\"2021-12-12T07:15:08.000Z\"}, //lever de soleil\n            \"sunset\":{\"$date\":\"2021-12-12T17:12:48.000Z\"}, //coucher de soleil\n            \"moonrise\":{\"$date\":\"2021-12-12T13:33:00.000Z\"}, //lever de lune\n            \"moonset\":{\"$date\":\"2021-12-12T00:57:00.000Z\"}, //coucher de lune\n            \"moon_phase\":0.29, //phase de la lune\n            \"temp\":{ //temp\u00e9rature\n            \"day\":10.81, // du jour\n            \"min\":6.19, // minimale\n            \"max\":12.11, // maximale\n            \"night\":10.43, // pendant la nuit\n            \"eve\":9.85, // au soir\n            \"morn\":6.56 // au matin\n        },\n        \"feels_like\":{ // temp\u00e9rature sentie\n            \"day\":9.15, // du jour\n            \"night\":8.94, // pendant la nuit\n            \"eve\":9.43, // le soir\n            \"morn\":3.67 // le matin\n        },\n        \"pressure\":1023, // pression atmosph\u00e9rique\n        \"humidity\":46, //humidit\u00e9 en pourcentage\n        \"wind_speed\":7.89, //vitesse du vent\n        \"wind_deg\":324, //orientation du vent en degr\u00e9\n        \"weather\":[  // le climat\n            {\"id\":802,\"main\":\"Clouds\",\"description\":\"partiellement nuageux\",\"icon\":\"03d\"}], \n        \"clouds\":34 // nuages\n        },\n    \u2026  // suite des pr\u00e9visions des jours suivants\n    ],\n\"name\":\"Matmata\"  // nom de la ville\n}\n</code></pre></li> </ul> <p>Requ\u00eates \u00e0 r\u00e9aliser : </p> <ol> <li>Afficher le nom des villes dont le nom contient \"bir\" ou \"Bir\".</li> <li>Ajouter un champ appel\u00e9 zone qui aura l\u2019une des valeurs suivantes selon sa latitude\u00a0:<ul> <li>sud si latitude &lt;34</li> <li>centre si latitude entre 34 et 36</li> <li>nord si latitude &gt;36</li> </ul> </li> <li>Afficher le nom des villes contenant les lettre t, b, r.</li> <li>Afficher le nom des villes qui poss\u00e8dent au moins une pr\u00e9vision avec une vitesse du vent sup\u00e9rieure \u00e0 15.</li> <li>Afficher les noms des villes et leurs niveaux d\u2019humidit\u00e9 qui ont toutes les pr\u00e9visions d\u2019humidit\u00e9 inf\u00e9rieures \u00e0 47.</li> <li>Calculer la temp\u00e9rature (temp.day) moyenne, et la vitesse du vent moyenne de la ville de Bizerte.</li> <li>Quel est le jour le plus chaud (temp.day) et dans quelle ville.</li> <li>Afficher les temp\u00e9ratures minimale et maximale, la vitesse du vent et la description du climat pour la ville de Bizerte au 15/12/2021.</li> </ol>"}, {"location": "exercice.html#travail-optionnel", "title": "Travail Optionnel", "text": "<p>Choisir l'un des th\u00e8mes et cr\u00e9er des exemples de requ\u00eates sur la base restaurants ou une autre de base de ton choix. </p> <ul> <li>Indexation</li> <li>Objet cursor</li> <li>Requ\u00eates g\u00e9ospatiales</li> <li>Jointures avec <code>$lookup</code> et des conditions multiples.</li> </ul>"}, {"location": "installation.html", "title": "Installation et configuration", "text": ""}, {"location": "installation.html#installation-de-mongodb", "title": "Installation de MongoDB", "text": ""}, {"location": "installation.html#procedure-dinstallation-sous-windows", "title": "Proc\u00e9dure d'installation sous Windows", "text": "<p> Lancer l'installation du package MSI.  </p> <p></p> <p> Choisir l'installation en tant que service.  </p> <p></p> <p> Il est possible d'installer aussi MongoDB Compass.  </p> <p></p>"}, {"location": "installation.html#configuration", "title": "Configuration", "text": "<p>MongoDB est install\u00e9 dans le dossier <code>C:\\Program Files\\MongoDB\\Server\\4.0\\</code> contenant trois dossiers :</p> <ul> <li>bin : Contenant<ul> <li>Les fichiers binaires : comme mongod (serveur), mongos (Shard server) et mongo (Shell mongoDB par d\u00e9faut).</li> <li>Des utilitaires comme celui d'importation de donn\u00e9es (mongoimport) ou de monitoring (mongotop).</li> <li>Fichier de configuration mongod.cfg</li> </ul> </li> <li>data : L'espace de stockage.</li> <li>logs : Emplacement du journal.</li> </ul> <p>La configuration par d\u00e9faut est :</p> mongod.cfg <pre><code># Where and how to store data.\nstorage:\n  dbPath: C:\\Program Files\\MongoDB\\Server\\4.0\\data\n  journal:\n    enabled: true\n\n# where to write logging data.\nsystemLog:\n  destination: file\n  logAppend: true\n  path:  C:\\Program Files\\MongoDB\\Server\\4.0\\log\\mongod.log\n\n# network interfaces\nnet:\n  port: 27017\n  bindIp: 127.0.0.1\n</code></pre>"}, {"location": "installation.html#verification-de-linstallation", "title": "V\u00e9rification de l'installation", "text": "<p>Le serveur peut \u00eatre contr\u00f4l\u00e9 par la console Microsoft de gestion des services Windows (<code>services.msc</code>).</p> <p>Pour v\u00e9rifier l'installation taper la commade : <code>mongo -version</code>. Le r\u00e9sultat sera : </p> Astuce <p>Pour simplifier l'acc\u00e8s auxx diff\u00e9rents binaires MongoDB, ajouter dans la variable PATH le chemin au dossier d'installation <code>C:\\Program Files\\MongoDB\\Server\\4.0\\bin</code>.</p>"}, {"location": "installation.html#connexion-a-mongodb", "title": "Connexion \u00e0 MongoDB", "text": ""}, {"location": "installation.html#avec-le-shell-par-defaut", "title": "Avec le shell par d\u00e9faut", "text": "<pre><code>mongo\n&gt;\n</code></pre>"}, {"location": "installation.html#avec-mongodb-shell-mongosh", "title": "Avec MongoDB Shell mongosh", "text": "<p>C'est une version am\u00e9lior\u00e9e du Shell par d\u00e9faut :</p> <p></p> <p>Il permet d'ajouter au shell :</p> <ul> <li>La coloration syntaxique</li> <li>La compl\u00e9tion automatique</li> <li>Des messages d'erreur plus d\u00e9taill\u00e9s</li> </ul> Note <p>MongoDB Shell est l'outil recommand\u00e9 pour ce TP. Il est bas\u00e9 sur javascript.</p>"}, {"location": "installation.html#avec-mongodb-compass", "title": "Avec MongoDB Compass", "text": "<p>Sp\u00e9cifier la cha\u00eene de connexion (mongodb://localhost:27017) et cliquer sur . Si la configuration standard n'est pas modifi\u00e9e, vous pouvez laisser la cha\u00eene de connexion vide.  </p> <p> </p> <p>S\u00e9lectionner la base local et puis la collection startup_log qui contient les informations de connexions.  </p>"}, {"location": "installation.html#mongodb-avec-docker", "title": "MongoDB avec Docker", "text": "<p> T\u00e9l\u00e9charger l'image officielle de MongoDB (ici la version 6.0.1)</p> <pre><code>docker pull mongo:6.0.1\n</code></pre> <p>Pour v\u00e9rifier que l'image est bien t\u00e9l\u00e9charg\u00e9e et inspecter sa taille :</p> <pre><code>docker images | grep mongo\n</code></pre> <p> Ex\u00e9cuter un container</p> <pre><code>docker run -d -p 27017:27017 --name mongodb mongo:6.0.1\n</code></pre> <p>Pour v\u00e9rifier que le container est en cours d'ex\u00e9cution :</p> <pre><code>docker ps\n</code></pre> <p> Se connecter \u00e0 MongoDB</p> <p> Avec le shell  <pre><code>docker exec -it mongodb mongosh\n</code></pre></p> <p> Avec Compass Sp\u00e9cifier la cha\u00eene de connexion (mongodb://localhost:27017) et cliquer sur .  </p>"}, {"location": "pymongo.html", "title": "MongoDB avec Pymongo", "text": ""}, {"location": "pymongo.html#mongodb-avec-pymongo", "title": "MongoDB avec PyMongo", "text": ""}, {"location": "pymongo.html#installation-du-package", "title": "Installation du package", "text": "<p> Utiliser pip pour installer pymongo</p> <pre><code>pip install pymongo\n</code></pre> <p> V\u00e9rifier l'installation</p> <pre><code>from pymongo import MongoClient\n</code></pre> <p> Si aucune erreur n'est apparue, alors l'installation est r\u00e9ussie.</p>"}, {"location": "pymongo.html#exemple", "title": "Exemple", "text": "Dataset <p>Pour que les exemples s'ex\u00e9cutent correctement, le fichier json flights-20k.json  doit \u00eatre import\u00e9 dans la base de donn\u00e9es flightstats et la collection flights.</p> <p>Le code des exemples qui suivent est disponible en format Notebook Jupyter : Pymongo.ipynb </p>"}, {"location": "pymongo.html#se-connecter-au-serveur-mongodb", "title": "Se connecter au serveur MongoDB", "text": "<pre><code>from pymongo import MongoClient\n\nclient = MongoClient(\"localhost\", 27017)\n</code></pre>"}, {"location": "pymongo.html#afficher-les-bd-disponibles", "title": "Afficher les BD disponibles", "text": "<pre><code>client.list_database_names()\n</code></pre>"}, {"location": "pymongo.html#selectionner-une-bases-de-donnees", "title": "S\u00e9lectionner une bases de donn\u00e9es", "text": "<pre><code>db = client['flightstats']\n# le choix du bd permet de retrouver la m\u00eame syntaxe que le shell de MongoDB\n</code></pre>"}, {"location": "pymongo.html#afficher-les-collections", "title": "Afficher les collections", "text": "<pre><code>db.list_collection_names()\n</code></pre> <pre><code>['flights']\n</code></pre>"}, {"location": "pymongo.html#nombre-de-document-dune-collection", "title": "Nombre de document d'une collection", "text": "<pre><code>db.flights.count_documents({})\n</code></pre> <pre><code>20000\n</code></pre>"}, {"location": "pymongo.html#afficher-un-document", "title": "Afficher un document", "text": "<pre><code>from pprint import pprint\npprint(db.flights.find_one())\n</code></pre> <pre><code>{'_id': ObjectId('634727c85afd6caa6fed4c9e'),\n 'date': '2001/01/13 14:56',\n 'delay': 32,\n 'destination': 'SJC',\n 'distance': 417,\n 'origin': 'SAN'}\n</code></pre>"}, {"location": "pymongo.html#insertion", "title": "Insertion", "text": "<pre><code>myflight = { 'date': '2022/10/10 10:15',\n 'delay': 12,\n 'destination': 'SJC',\n 'distance': 417,\n 'origin': 'SAN'}\nnew_id = db.flights.insert_one(myflight).inserted_id\nprint(new_id)\n</code></pre> <pre><code>634742d03646634ba81c9855\n</code></pre>"}, {"location": "pymongo.html#recherche-par-_id", "title": "Recherche par _id", "text": "<pre><code># Remplacer la valeur _id par la sortie de la cellule pr\u00e9c\u00e9dente\ndb.flights.count_documents({\"_id\":\"634742d03646634ba81c9855\"})\n</code></pre> <pre><code>0\n</code></pre> <pre><code>db.flights.count_documents({\"_id\":new_id})\n</code></pre> <pre><code>1\n</code></pre> <pre><code>from bson.objectid import ObjectId\n# Remplacer la valeur _id par la sortie de la cellule d'insertion de document\ndb.flights.count_documents({\"_id\":ObjectId(\"634742d03646634ba81c9855\")})\n</code></pre> <pre><code>1\n</code></pre>"}, {"location": "pymongo.html#supprimer", "title": "Supprimer", "text": "<pre><code>res = db.flights.delete_one({\"_id\":new_id})\n</code></pre> <pre><code># Nombre de documents supprim\u00e9s \nres.deleted_count\n</code></pre> <pre><code>1\n</code></pre>"}, {"location": "pymongo.html#recherche", "title": "Recherche", "text": "<pre><code># Les vols ayant un retard compris entre 60 et 61 minutes tri\u00e9 par le retard\nres = db.flights.find({\"$and\" :[{\"delay\":{\"$gte\":60}},{\"delay\":{\"$lte\":61}}]}).sort(\"delay\")\n</code></pre> <pre><code>for fl in res:\n    print(f\"{fl['origin']}-{fl['destination']}: {fl['delay']}\")\n</code></pre> <pre><code>SJC-LAS: 60\nSJC-MCI: 60\nFLL-JAX: 60\nONT-PHX: 60\nSFO-SAN: 60\nOAK-LAX: 60\nMDW-STL: 60\nLAS-ONT: 60\nOKC-MCI: 60\nDAL-AMA: 60\nSAN-TUS: 60\nPHX-BHM: 60\nPHX-ABQ: 60\nBWI-CLE: 60\nMHT-BWI: 60\nBUR-OAK: 60\nBNA-MDW: 60\nLAS-SLC: 60\nBWI-BNA: 60\nSJC-BUR: 60\nISP-TPA: 60\nPDX-BOI: 60\nLAX-PHX: 60\nOAK-SEA: 60\nABQ-PHX: 60\nRNO-OAK: 60\nSLC-PHX: 60\nSAN-ELP: 60\nOAK-LAX: 60\nSFO-PHX: 60\nSMF-BUR: 60\nMDW-BHM: 60\nOAK-LAX: 60\nSAN-PHX: 60\nMCI-PHX: 60\nABQ-PHX: 60\nIAH-DAL: 60\nPHX-ONT: 60\nHOU-CRP: 60\nSJC-LAX: 60\nHOU-SAT: 60\nSTL-HOU: 60\nMCI-BWI: 60\nRNO-OAK: 60\nSNA-SJC: 60\nSLC-OAK: 60\nDAL-AMA: 60\nSFO-PHX: 60\nONT-PHX: 61\nELP-AUS: 61\nHOU-MSY: 61\nBWI-MCO: 61\nMCI-MDW: 61\n</code></pre>"}, {"location": "pymongo.html#agregation-et-visualisation-du-resultat", "title": "Agr\u00e9gation et visualisation du r\u00e9sultat", "text": "<pre><code>import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n#Calculer le retard par a\u00e9oroport de d\u00e9part et afficher 5 premiers\npipeline = [\n    {\"$group\": {\"_id\": \"$origin\", \"moyenne\": {\"$avg\": \"$delay\"}}},\n    {\"$sort\": {\"moyenne\":-1}},\n    {\"$limit\":5}]\nres = db.flights.aggregate(pipeline)\n</code></pre> <pre><code>df = pd.DataFrame(list(res))\ndf.rename({\"_id\":\"A\u00e9roport\"}, axis=1, inplace=True)\n</code></pre> <pre><code>sns.barplot(data=df, y=\"moyenne\", x=\"A\u00e9roport\")\nplt.show()\n</code></pre>"}, {"location": "pymongo.html#exercice", "title": "Exercice", "text": "<ol> <li> <p>Ecrire un programme Python qui permet de charger le contenu du fichier CSV airports.csv  dans MongoDB selon 2 mod\u00e9lisations : normalis\u00e9e et d\u00e9normalis\u00e9e.</p> </li> <li> <p>V\u00e9rifier le temps d'ex\u00e9cution de la requ\u00eate permettant d'afficher la ville de chaque a\u00e9roport dans chacune des mod\u00e9lisation.</p> </li> </ol>"}, {"location": "pymongo.html#documentation-pymongo", "title": "Documentation Pymongo", "text": "<p> Documentation PyMongo</p>"}, {"location": "replication.html", "title": "Replication", "text": ""}, {"location": "replication.html#replication-dans-mongodb", "title": "R\u00e9plication Dans MongoDB", "text": ""}, {"location": "replication.html#definition", "title": "D\u00e9finition", "text": "<p>La r\u00e9plication est une technique commune aux syst\u00e8mes NoSQL pour assurer la s\u00e9curit\u00e9 et la reprise apr\u00e8s les pannes. Elle consiste \u00e0 cr\u00e9er des copies des donn\u00e9es sur des serveurs diff\u00e9rents pouvant remplacer le serveur en cas de panne.</p>"}, {"location": "replication.html#principe-du-replica-set", "title": "Principe du Replica Set", "text": "<ul> <li>Un Replica Set est un groupe de serveurs mongod qui g\u00e8rent les m\u00eames donn\u00e9es.</li> <li>Il est compos\u00e9 d'un unique serveur primaire (ma\u00eetre) et de plusieurs serveurs secondaires (esclaves).</li> <li>Le serveur primaire r\u00e9pond aux demandes du (lecture/\u00e9criture) client (driver). Le client peut \u00e9galement lire \u00e0 partir des serveurs secondaires.</li> <li>Les serveurs secondaires reproduisent les m\u00eames op\u00e9rations (\u00e9critures) r\u00e9alis\u00e9es au niveau du serveur primaire.</li> <li>Si le serveur primaire est indisponible, un serveur secondaire est promu en primaire apr\u00e8s une proc\u00e9dure d'\u00e9lection.</li> <li>Si le nombre de serveurs est pair, un serveur arbitre est ajout\u00e9.</li> <li>Le nombre minimal de serveurs est de 3 et ils peuvent atteindre 50.</li> <li>7 serveurs au maximum peuvent participer \u00e0 une \u00e9lection.</li> </ul>"}, {"location": "replication.html#mise-en-place-dun-replica-set-avec-docker", "title": "Mise en place d'un Replica Set avec Docker", "text": "<p>La cr\u00e9ation d'un cluster de 3 noeuds avec Docker consiste \u00e0 r\u00e9aliser les 3 \u00e9tapes suivantes :</p> <ol> <li>Cr\u00e9er un r\u00e9seau Docker pour interconnecter les containers</li> <li>D\u00e9marrer 3 instances de MongoDB</li> <li>Initier le Replica Set</li> </ol> <p></p> <p> Cr\u00e9er un r\u00e9seau docker  <pre><code>docker network create mongoCluster\n</code></pre>  D\u00e9marrer les 3 containers MongoDB</p> <pre><code>docker run -d -p 27017:27017 --name mongo1 --network mongoCluster mongo:6.0.1 mongod --replSet rs1 --bind_ip localhost,mongo1\ndocker run -d -p 27018:27017 --name mongo2 --network mongoCluster mongo:6.0.1 mongod --replSet rs1 --bind_ip localhost,mongo2\ndocker run -d -p 27019:27017 --name mongo3 --network mongoCluster mongo:6.0.1 mongod --replSet rs1 --bind_ip localhost,mongo3\n</code></pre> <p> Initier le Replica Set</p> <ul> <li> <p>Se connecter \u00e0 mongo1 avec Compass (mongodb://localhost:27017) ou avec la commande <code>docker exec -it mongo1 mongosh</code></p> </li> <li> <p>Ex\u00e9cuter depuis le shell <pre><code>&gt; rs.initiate({ _id: \"rs1\", members: [\n   {_id: 0, host: \"mongo1\"},\n   {_id: 1, host: \"mongo2\"},\n   {_id: 2, host: \"mongo3\"}\n ]\n})\n</code></pre></p> </li> <li> <p>V\u00e9rifier le replica <pre><code>&gt; rs.status()\n</code></pre> La r\u00e9ponse est similaire \u00e0 ce qui suit :</p> </li> </ul> <pre><code>{\n  set: 'rs1',\n  date: 2022-10-12T09:56:20.947Z,\n  myState: 1,\n  term: Long(\"1\"),\n  syncSourceHost: '',\n  syncSourceId: -1,\n  heartbeatIntervalMillis: Long(\"2000\"),\n  majorityVoteCount: 2,\n  writeMajorityCount: 2,\n  votingMembersCount: 3,\n  writableVotingMembersCount: 3,\n  optimes: {\n    lastCommittedOpTime: { ts: Timestamp({ t: 1665568580, i: 7 }), t: Long(\"1\") },\n    lastCommittedWallTime: 2022-10-12T09:56:20.382Z,\n    readConcernMajorityOpTime: { ts: Timestamp({ t: 1665568580, i: 7 }), t: Long(\"1\") },\n    appliedOpTime: { ts: Timestamp({ t: 1665568580, i: 7 }), t: Long(\"1\") },\n    durableOpTime: { ts: Timestamp({ t: 1665568580, i: 7 }), t: Long(\"1\") },\n    lastAppliedWallTime: 2022-10-12T09:56:20.382Z,\n    lastDurableWallTime: 2022-10-12T09:56:20.382Z\n  },\n  lastStableRecoveryTimestamp: Timestamp({ t: 1665568522, i: 1 }),\n  electionCandidateMetrics: {\n    lastElectionReason: 'electionTimeout',\n    lastElectionDate: 2022-10-12T09:52:42.586Z,\n    electionTerm: Long(\"1\"),\n    lastCommittedOpTimeAtElection: { ts: Timestamp({ t: 1665568351, i: 1 }), t: Long(\"-1\") },\n    lastSeenOpTimeAtElection: { ts: Timestamp({ t: 1665568351, i: 1 }), t: Long(\"-1\") },\n    numVotesNeeded: 2,\n    priorityAtElection: 1,\n    electionTimeoutMillis: Long(\"10000\"),\n    numCatchUpOps: Long(\"0\"),\n    newTermStartDate: 2022-10-12T09:52:42.779Z,\n    wMajorityWriteAvailabilityDate: 2022-10-12T09:52:44.189Z\n  },\n  members: [\n    {\n      _id: 0,\n      name: 'mongo1:27017',\n      health: 1,\n      state: 1,\n      stateStr: 'PRIMARY',\n      uptime: 310,\n      optime: [Object],\n      optimeDate: 2022-10-12T09:56:20.000Z,\n      lastAppliedWallTime: 2022-10-12T09:56:20.382Z,\n      lastDurableWallTime: 2022-10-12T09:56:20.382Z,\n      syncSourceHost: '',\n      syncSourceId: -1,\n      infoMessage: '',\n      electionTime: Timestamp({ t: 1665568362, i: 1 }),\n      electionDate: 2022-10-12T09:52:42.000Z,\n      configVersion: 1,\n      configTerm: 1,\n      self: true,\n      lastHeartbeatMessage: ''\n    },\n    {\n      _id: 1,\n      name: 'mongo2:27017',\n      health: 1,\n      state: 2,\n      stateStr: 'SECONDARY',\n      uptime: 229,\n      optime: [Object],\n      optimeDurable: [Object],\n      optimeDate: 2022-10-12T09:56:20.000Z,\n      optimeDurableDate: 2022-10-12T09:56:20.000Z,\n      lastAppliedWallTime: 2022-10-12T09:56:20.382Z,\n      lastDurableWallTime: 2022-10-12T09:56:20.382Z,\n      lastHeartbeat: 2022-10-12T09:56:20.778Z,\n      lastHeartbeatRecv: 2022-10-12T09:56:20.316Z,\n      pingMs: Long(\"0\"),\n      lastHeartbeatMessage: '',\n      syncSourceHost: 'mongo1:27017',\n      syncSourceId: 0,\n      infoMessage: '',\n      configVersion: 1,\n      configTerm: 1\n    },\n    {\n      _id: 2,\n      name: 'mongo3:27017',\n      health: 1,\n      state: 2,\n      stateStr: 'SECONDARY',\n      uptime: 229,\n      optime: [Object],\n      optimeDurable: [Object],\n      optimeDate: 2022-10-12T09:56:20.000Z,\n      optimeDurableDate: 2022-10-12T09:56:20.000Z,\n      lastAppliedWallTime: 2022-10-12T09:56:20.382Z,\n      lastDurableWallTime: 2022-10-12T09:56:20.382Z,\n      lastHeartbeat: 2022-10-12T09:56:20.778Z,\n      lastHeartbeatRecv: 2022-10-12T09:56:20.317Z,\n      pingMs: Long(\"0\"),\n      lastHeartbeatMessage: '',\n      syncSourceHost: 'mongo1:27017',\n      syncSourceId: 0,\n      infoMessage: '',\n      configVersion: 1,\n      configTerm: 1\n    }\n  ],\n  ok: 1,\n  '$clusterTime': {\n    clusterTime: Timestamp({ t: 1665568580, i: 7 }),\n    signature: {\n      hash: Binary(Buffer.from(\"0000000000000000000000000000000000000000\", \"hex\"), 0),\n      keyId: Long(\"0\")\n    }\n  },\n  operationTime: Timestamp({ t: 1665568580, i: 7 })\n}\n</code></pre>"}, {"location": "replication.html#test-du-replica-set", "title": "Test du Replica Set", "text": ""}, {"location": "replication.html#test-des-operations-de-lectureecriture", "title": "Test des op\u00e9rations de lecture/\u00e9criture", "text": "<p>Essayer les op\u00e9rations suivantes :</p> <p> Se connecter au serveur primaire et cr\u00e9er une base de donn\u00e9es 'Courrier' en suivant les \u00e9tapes suivantes :</p> <pre><code>&gt; use courrier\n&gt; db.createCollection('mail')\n&gt; db.mail.insert({from:'support@mongodb.com',subject:'Replica Set Testing',body:'OK'})\n</code></pre> <p> Se connecter aux serveurs secondaires et v\u00e9rifier le contenu de la base :</p> <pre><code>   &gt; use courrier\n   &gt; db.mail.find()\n</code></pre> <p>Pour \u00e9viter cette erreur, ex\u00e9cuter <code>&gt; rs.slaveOk()</code> ou <code>&gt; rs.secondaryOk()</code> et r\u00e9essayer.</p> <p> V\u00e9rifier si l'insertion est possible depuis un serveur secondaire.</p>"}, {"location": "replication.html#test-de-la-reprise-sur-panne", "title": "Test de la reprise sur panne", "text": "<p>Pour simuler une panne :</p> <ul> <li>Se connecter au serveur primaire.</li> <li>Arr\u00eater le serveur et examiner le comportement du Replica Set (r\u00e9ponse aux requ\u00eate, \u00e9lection d'un nouveau serveur primaire).</li> </ul> <pre><code>&gt; use admin\n&gt; db.shutdownServer()\n</code></pre>"}, {"location": "replication.html#le-fichier-oplog", "title": "Le fichier oplog", "text": "<p>Le serveur primaire cr\u00e9e automatiquement une collection oplog.rs dans la base de donn\u00e9es local pour y enregistrer toutes les op\u00e9rations de mise \u00e0 jour. Les serveurs secondaires lisent r\u00e9guli\u00e8rement le fichier oplog pour r\u00e9pliquer les donn\u00e9es.  </p> <p>Afficher le contenu de cette collection :</p> <p><pre><code>&gt; use local\n&gt; db.oplog.rs.find().pretty()\n</code></pre> Vous pouvez lire les informations suivantes :</p> <ul> <li>\"op\" : code op\u00e9ration</li> <li>\"ts\" : date et heure</li> <li>\"ns\" : collection concern\u00e9e</li> </ul> <p>Pour fixer la taille de ce fichier modifier le param\u00e8tre <code>oplogSizeMB</code></p> <pre><code>replication:\n  oplogSizeMB: &lt;taille en MB&gt;\n</code></pre>"}, {"location": "replication.html#haute-disponibilite-et-modes-de-lectures", "title": "Haute disponibilit\u00e9 et modes de lectures", "text": "<p>Pour am\u00e9liorer le temps de r\u00e9ponse des op\u00e9rations de lecture (l'\u00e9criture est exclusivement ex\u00e9cut\u00e9e sur le serveur primaire). Plusieurs modes d'ex\u00e9cution des lectures sont possibles \u00e0 travers le pram\u00e8tre <code>localThresholdMS</code> de la section replication \u00e0 savoir :</p> <ul> <li>Primary : valeur par d\u00e9faut, lecture sur le serveur d\u2019\u00e9criture.</li> <li>PrimaryPreferred : si jamais le PRIMARY n\u2019est plus disponible, les requ\u00eates sont rout\u00e9es vers le SECONDARY.</li> <li>Secondary : Rout\u00e9 uniquement sur les SECONDARY.</li> <li>Nearest : Le serveur physique le plus proche sur le r\u00e9seau (latence la plus faible) est interrog\u00e9 directement par le client.</li> </ul> <p>D'autres param\u00e8tres permettent aussi d'influencer la haute disponibilit\u00e9 comme la priorit\u00e9 d'\u00e9lection de chaque serveurs et le param\u00e8tre readConcern.</p> <p> Se connecter au primary</p> <pre><code>docker exec -it mongo1 mongosh\n</code></pre> <p> Lire avec diff\u00e9rents modes</p> <p><pre><code>use courrier;\ndb.mail.find().readPref('primary');\ndb.mail.find().readPref('secondary');\ndb.mail.find().readPref('primaryPreferred');\ndb.mail.find().readPref('secondaryPreferred');\n</code></pre>  Se connecter \u00e0 un noeud secondaire et lire avec diff\u00e9rents modes</p> <pre><code>docker exec -it mongo2 mongosh\n</code></pre> <p>puis</p> <pre><code>use courrier;\ndb.mail.find().readPref('primary');\ndb.mail.find().readPref('secondary');\ndb.mail.find().readPref('primaryPreferred');\ndb.mail.find().readPref('secondaryPreferred');\n</code></pre>"}, {"location": "sharding.html", "title": "Sharding", "text": ""}, {"location": "sharding.html#mongdb-sharding", "title": "MongDB Sharding", "text": ""}, {"location": "sharding.html#definition", "title": "D\u00e9finition", "text": "<p>C'est une m\u00e9thode de distribution des donn\u00e9es sur plusieurs machines (cluster). Elle permet \u00e0 MongoDB de passer \u00e0 l'\u00e9chelle pour accueillir des bases de donn\u00e9es massives avec un d\u00e9bit tr\u00e8s important. Elle fait partie des techniques de mise \u00e0 l'\u00e9chelle horizontale : Horizontal scaling.</p> <p>shard : \u00e9clat, tesson (fragment)</p>"}, {"location": "sharding.html#principe-de-fonctionnement", "title": "Principe de fonctionnement", "text": "<p>Le cluster est compos\u00e9 de 3 types de serveurs :</p> <ol> <li>mongos : routeur pour l'acheminement des requ\u00eates.</li> <li>Config Server : enregistre les m\u00e9tadonn\u00e9es sur et la configuration pour le cluster.</li> <li>Shard : contient un sous ensemble des donn\u00e9es (chunk ou partition) qui peut \u00eatre d\u00e9ploy\u00e9 comme Replica Set.</li> </ol> <p></p> <p>La distribution des donn\u00e9es sur le cluster est bas\u00e9e sur une cl\u00e9 shard key. La cl\u00e9 peut \u00eatre un ou plusieurs champs. Elle est utilis\u00e9e dans l'une des deux strat\u00e9gies de distribution :</p> <ul> <li>Hashed Sharding : un hash de cl\u00e9 d\u00e9termine quelle dans quelle chunk mettre les donn\u00e9es.</li> <li>Ranged Sharding : la cl\u00e9 est affect\u00e9 \u00e0 un chunk selon valeur.</li> </ul> Hashed Sharding Ranged Sharding"}, {"location": "sharding.html#replication-et-sharding-avec-docker", "title": "R\u00e9plication et Sharding avec Docker", "text": "<p>Le cluster \u00e0 mettre en place est comps\u00e9e des noeuds suivants :</p> <ul> <li>2 Mongos (router): routage des requ\u00eates vers les shards.<ul> <li><code>router01</code></li> <li><code>router02</code></li> </ul> </li> <li>3 Config Servers : enregistre les m\u00e9tadonn\u00e9es de la configuration du cluster<ul> <li><code>configsvr01</code></li> <li><code>configsvr02</code></li> <li><code>configsvr03</code></li> </ul> </li> <li>3 Shards (avec un replica set de 3 membres) : d\u00e9tient une partie (shard) des donn\u00e9es.<ul> <li><code>shard01-a</code>, <code>shard01-b</code>, <code>shard01-c</code></li> <li><code>shard02-a</code>, <code>shard02-b</code>, <code>shard02-c</code></li> <li><code>shard03-a</code>, <code>shard03-b</code>, <code>shard03-c</code></li> </ul> </li> </ul> <p>docker-compose sera utilis\u00e9 pour automatiser la gestion des diff\u00e9rents containers (14 dans notre cas). Les fichiers n\u00e9cessaires \u00e0 cette manipulation sont mis dans cette archive mongodb-cluster.zip que vous devez t\u00e9l\u00e9charger et d\u00e9compresser.</p> <p>Vous obtiendrez un dossier contenant :</p> <ul> <li><code>docker-compose.yaml</code> qui contient les param\u00e8tres des diff\u00e9rents containers :</li> </ul> <pre><code>version: '3'\n\nservices:\n# Router\n\n  ## router 01\n  router01:\n    image: mongo:6.0.1\n    container_name: router-01\n    command: |\n      mongos --port 27017 --configdb rs-config-server/configsvr01:27017,configsvr02:27017,configsvr03:27017 --bind_ip_all\n    ports:\n      - 27117:27017\n    volumes:\n      - ./scripts:/scripts\n\n  ## router 02\n  router02:\n    image: mongo:6.0.1\n    container_name: router-02\n    command: |\n      mongos --port 27017 --configdb rs-config-server/configsvr01:27017,configsvr02:27017,configsvr03:27017 --bind_ip_all\n    volumes:\n      - ./scripts:/scripts\n    ports:\n      - 27118:27017\n    links:\n      - router01\n\n# Config Servers\n\n  ## Config server 01\n  configsvr01:\n    image: mongo:6.0.1\n    container_name: mongo-config-01 \n    command: |\n      mongod --port 27017 --configsvr --replSet rs-config-server\n    volumes:\n      - ./scripts:/scripts \n    ports:\n      - 27119:27017\n    links:\n      - shard01-a\n      - shard02-a\n      - shard03-a\n\n  ## Config server 02\n  configsvr02:\n    image: mongo:6.0.1\n    container_name: mongo-config-02 \n    command: |\n      mongod --port 27017 --configsvr --replSet rs-config-server\n    volumes:\n      - ./scripts:/scripts\n    ports:\n      - 27120:27017\n    links:\n      - configsvr01\n\n  ## Config server 03\n  configsvr03:\n    image: mongo:6.0.1\n    container_name: mongo-config-03 \n    command: |\n      mongod --port 27017 --configsvr --replSet rs-config-server\n    volumes:\n      - ./scripts:/scripts\n    ports:\n      - 27121:27017\n    links:\n      - configsvr02\n\n# Shards\n\n  ## Shards 01   \n  shard01-a:\n    image: mongo:6.0.1\n    container_name: shard-01-a\n    command: |\n      mongod --port 27017 --shardsvr --replSet rs-shard-01\n    volumes:\n      - ./scripts:/scripts\n    ports:\n      - 27122:27017\n    links:\n      - shard01-b\n      - shard01-c\n  shard01-b:\n    image: mongo:6.0.1\n    container_name: shard-01-b\n    command: |\n      mongod --port 27017 --shardsvr --replSet rs-shard-01\n    volumes:\n      - ./scripts:/scripts\n    ports:\n      - 27123:27017\n  shard01-c:\n    image: mongo:6.0.1\n    container_name: shard-01-c\n    command: |\n      mongod --port 27017 --shardsvr --replSet rs-shard-01\n    volumes:\n      - ./scripts:/scripts\n    ports:\n      - 27124:27017\n\n  ## Shards 02\n  shard02-a:\n    image: mongo:6.0.1\n    container_name: shard-02-a\n    command: |\n      mongod --port 27017 --shardsvr --replSet rs-shard-02\n    volumes:\n      - ./scripts:/scripts\n    ports:\n      - 27125:27017\n    links:\n      - shard02-b\n      - shard02-c\n  shard02-b:\n    image: mongo:6.0.1\n    container_name: shard-02-b\n    command: |\n      mongod --port 27017 --shardsvr --replSet rs-shard-02\n    volumes:\n      - ./scripts:/scripts\n    ports:\n      - 27126:27017\n  shard02-c:\n    image: mongo:6.0.1\n    container_name: shard-02-c\n    command: |\n      mongod --port 27017 --shardsvr --replSet rs-shard-02\n    volumes:\n      - ./scripts:/scripts\n    ports:\n      - 27127:27017\n\n  ## Shards 03\n  shard03-a:\n    image: mongo:6.0.1\n    container_name: shard-03-a\n    command: |\n      mongod --port 27017 --shardsvr --replSet rs-shard-03\n    volumes:\n      - ./scripts:/scripts\n    ports:\n      - 27128:27017\n    links:\n      - shard03-b\n      - shard03-c\n  shard03-b:\n    image: mongo:6.0.1\n    container_name: shard-03-b\n    command: |\n      mongod --port 27017 --shardsvr --replSet rs-shard-03\n    volumes:\n      - ./scripts:/scripts\n    ports:\n      - 27129:27017\n  shard03-c:\n    image: mongo:6.0.1\n    container_name: shard-03-c\n    command: |\n      mongod --port 27017 --shardsvr --replSet rs-shard-03\n    volumes:\n      - ./scripts:/scripts\n    ports:\n      - 27130:27017\n</code></pre> <ul> <li>Un dossier <code>scripts</code>  contenant les scripts d'initialisation de replica set et shards, les routeurs et les serveurs de configuration.</li> </ul> <p> D\u00e9marrer la pile de containers</p> <pre><code>docker-compose up -d\n</code></pre> <p> Initialiser les serveurs de configuration</p> <pre><code>docker-compose exec configsvr01 sh -c \"mongosh &lt; /scripts/configserver.js\"\n</code></pre> <p> Initialiser les shards <pre><code>docker-compose exec shard01-a sh -c \"mongosh &lt; /scripts/replicaset_1.js\"\ndocker-compose exec shard02-a sh -c \"mongosh &lt; /scripts/replicaset_2.js\"\ndocker-compose exec shard03-a sh -c \"mongosh &lt; /scripts/replicaset_3.js\"\n</code></pre></p> <p> Attendre l'\u00e9lection des primary puis initialiser les routeurs</p> <p><pre><code>docker-compose exec router01 sh -c \"mongosh &lt; /scripts/router.js\"\n</code></pre>  V\u00e9rifier le cluster :</p> <ul> <li> <p>V\u00e9rifier la r\u00e9plication <pre><code>docker-compose exec shard01-a mongosh\n</code></pre> et ensuite <code>rs.status()</code></p> </li> <li> <p>V\u00e9rifier les shards <pre><code>docker-compose exec router01 mongosh\n</code></pre> et ensuite <code>sh.status()</code></p> </li> </ul> <p> Distribuer une base de donn\u00e9es</p> <ul> <li>Cr\u00e9er une nouvelle base et nouvelle collection. Puis cr\u00e9er un index sur _id.</li> </ul> <p><pre><code>&gt; use testDB;\n&gt; sh.enableSharding(\"testDB\");\n&gt; db.createCollection(\"test\");\n&gt; db.test.createIndex({\"_id\":1});\n&gt; sh.shardCollection(\"testDB.test\",{\"_id\":1});\n</code></pre> - Importer un dataset et v\u00e9rifier l'\u00e9tat du Sharding.</p> Terminal <pre><code>mongoimport -d testDB -c test --port 27017 restaurants.json\nmongosh --port 27017 --eval \"sh.status()\"\n</code></pre> Attention <p>Les requ\u00eates sont destin\u00e9es au routeur.</p> <p>Inspecter les propri\u00e9t\u00e9s et d\u00e9terminer :</p> <ul> <li>La cl\u00e9 de sharding</li> <li>Le nombre de shunks par shard</li> </ul>"}, {"location": "sharding.html#isolation-et-coherence", "title": "Isolation et coh\u00e9rence", "text": "<p>Dans ce quit, nous configurons les niveaux de coh\u00e9rence avec les param\u00e8tres readConcern et writeConcern.</p> <p> Se connecter \u00e0 un routeur</p> <pre><code>docker-compose exec -it router01 mongosh\n</code></pre> <p> readConcern</p> <pre><code>use testDB;\ndb.test.find({}).readConcern(\"majority\");\n</code></pre> <p> writeConcern <pre><code>try {\n  db.test.updateMany(\n    { \"name\" : \"Windy's\" },\n    { $inc: { \"violations\" : 3}, $set: { \"Closed\" : true } },\n    { w: \"majority\", wtimeout: 100 }\n  );\n} catch (e) {\n  print(e);\n}\n</code></pre></p>"}, {"location": "encryptcontent_plugin_1;yf6KfwuhVfzN9ciajYHuTg==;SVqJEgE5nNZoiIyLQw/0Hg==", "title": "61DXg8l6P91vAzav2sd8hA==;/fZta1GVEmz59ZhWjyM+vKXPPtQ+CzuvpNPA823uKmw=", "text": "ceICpykiH8EYoNtbxvph/Q==;L5r7zAOCDqy4anGNwGf9RQ=="}, {"location": "encryptcontent_plugin_1;gFVmozhP/E/d7aDMgvuwSA==;j+IKnZwzxOOyMtqA165NrUyjz8l5tWZPXACNHZoUjV8=", "title": "QLCWeR/Iyz7bCAUwD5v/MQ==;JUfmxcUR27ckF2xxNrVIJA==", "text": "vKEysupNlf+KoX7K33TgEA==;8WVID0rwik5naWuw5O8O/5gUvaXHTHtwbSLH9B8dxKLytubo9zUGA1kwyeOADVHO4gaxjbDLnrmGsna3u5QnWyKl9L8iqEpouDqJyNa2iE7e+DLhmEw6AmkskVs3cyk9kOYHdCLb+SubpYiZGnIsci3GfOytsc2gkCngvJ/1LJASn84HOhEkoyWGUo7xiMLvQSUInOGMIKRIFR+MMgQjT8jHi19v7hE57ESUrVmmsVnSXwK8RnTgXL7jw1Cno0jJCCPJBRrN9Q9vh1pUzuEA3wzYLaz8lgKD7JQ7vVRMfoWKiTSPWApkTd62s1Rz1sQQFDJE3scdPnvGMwK0CT6CvatdYSnHhVC6LnH+qNDlkNzRQpij9KPKqMuSv8iHgBeEkKeGsdWUh+SXh9MlPgQ+1DOFH6FgQdDsoZ14VG+5Dt96YweouTT0/ctqFWhU/9UmdsURkJ7sL2gaaOOpdaGsDXu6mR1CJdp71UErLtTt/IwyeUopra3SCdmiXvhEKwEtVApQlA0W/2c/i937TwteNbzm0vlFvPUIMCm5BsB2wLLvrQfyzyH/59ePHdzE6+28WtVS8SOt45ah9ncTfXQnMep4aZ0ZFx0tjV5nFpWQQZ38nyjXCm4r9X9mNlKpiGxAzt3clIvhek8vDmn28R0oMy/Abb0MNtqQE7dRWAu8c3qXAi4OCioc3kQpL9Gw7xyMIUZmFaOZJCKv2zZk5g+wPN1jmN6OsUCRvJuVSyUNCxjGxGH+AZYNkj7QhQS+NhqzPidgNdiAHt6deHtC07y49cJUxP+9u0QedLt8vCg0wzW6mTYCkBwrdNbKH7fiIWdO5+l/ByVB7+oeLjgRuQxutOCL6sieFRkF+lKX/6lWnlTWwPkfbqt+eaP4OS7+mbX1ZZ218agX8HopUTeyUzcEi8t+VmpFanuFsD8nQiaxaYnQyzXDE65lw1SlBAUcI4I2yZAJSyCr41ZFnDqamDol1NJOaB0aNApRvCdCggIfjhSzmhlBx7bpwuWGSpOlQUzAWhmmcCbGj2QpudckgAyic4uLDWCCWy24KiRdMEUA0diSINr5XuCTPoePH5obsxcet1z+G7DnlCMGKxk7GKwUQFnSOUP2s3oxb65x9y4Q4YC7CgT3T1qViifwWZj1tEUX69D7R6mNp/mPuoJ9nZBGUFR92n+Hr2vdAgVgrVrKh2VtFl8SNoquSJnkTPwJcmOq2f05dS6wTwhgamj/96ht+hHHeoLoGtUnHAuL88SLAKpHOVOanqlGrnweIVHdcLYJsN+ZFoR3hqRr7vPJgHJ8zGWKKruk/Ov97n6QAsqZ7xQJ9FIxA8SYtYxBzeZG4AfFmRfUKqKi+FMs8RqKTW/jWM5H1qiSgMV7xWLqUtM2qOpTCp5N8byuuu4yS1FhE/NeHBoYG4EmHrgS+rdbHbdUAXKyNPPDFHQ5LC9kaxHO+ms1yTsGFL/easBBc0JqFUAduttaQjSz0JxBvxzWHctcFBOMZl9xT1dxL2DfqjSA4SIi/NV0bE7DzPTARwpBFBD0AxDm5IxgyuGCckheM64ssYsdUey6ZgIQF1AkxFgyaxCpEGXPDym06FM5HLJ75uAw0lJvTymR3essg1LOD1gG9NUtp/1NWMmgs009IP/s/IAx9mRzsVxkxOIXvtmNyk3A"}, {"location": "encryptcontent_plugin_1;4C65qP1AtkkVshosPiySjw==;KHhEj7B794j2csBbUSiFTFx7S+0a3tEuBU0FW4sGTsc=", "title": "XRzgRkJ+zC+h8U2+FE8UmA==;938hDTLy22IFFlS9GKpuZQ==", "text": "AbU+K93Grtezl94mEXKrhA==;wRftJ792H8ForRv6I+cRx9P0t3ybuA5TSlSidwmvNtig4SZbp0XZQgQ95YUGWKLDVkmT9PeBKvIV7LfRAoONYio4wVnWXVEnkzoNdx8LG0DiqpWM1lrWKJ3WLyL+UvryOux1qlOpMXj6rQ6kPuT+FyczhN19SKysW3UueYA3v4zSkucelLhFfee09XzdH0/a8cF9vliRGR95gKKedcWdvDd+zd3FYd9QgIO/3tfVj8lpfeR5hP+kUpqAbO/916YaHBpnXrKVf95VC4AtTZew5gCurH8OYkY3pKZmaPy2LazDp1PW7To+NJwdcG92hj4zzsilPpkiFAejGrf8UJ5XEYqUPOTiFZ9U0vOzXuamjZP7rpdTYFlYpP6qchrsyj1CZclNn1AeF3H+AI6CJTmyEL89jJb2GyB6xNRv83pNI6aEUwDxItDDYjOwcSFvbFGofqvQh+IRp5AZBsLnJJQvjxYtqTzdZXOVggQRsyGeRPK5RG7hBgo1VvrOTz1ncAKz0BzUS4S5/FucjfF5UMq6fQBkZMhNnowYwpPviZeeMGB7i6gXS8W8zV7v7DQ+1IakF7k9MiGNUzDzqeZC9KP82OMRPYhSB+42rCDxdhlfcqpzRnjcCph6MJibfD6kq+Q+3uOcytHofzJzQGPwUd48DAyndjSJeIdf1QR+tkTJ6lPBN70X8sRJm5Zt8rwLViojuoXm8lNqCFN89Fc7EZYQ/3pVUL1P3cZYAkjkzFTRXOb5jOPQcrT5rlOTBwBlZGUggkWAP66QLJxtpQDPZ/FN0v3sg42dytMYwEAqx3dQNX1lbCV14IOmlkwSEwSXxI8d7nme+3MCcpXvJCNtZ86B4nXIxZBs8xsarE8S/lddMARFr/v90AuDJU9idafs1D3uvvu60iTLqNgohTGWnm5sFzvSfqWXTGLdok7hqyTBEPERn9BKJ9RHWbvMWXNJVXC3qza+6AFovu4Hb2nEMcjk9enGyHOM2D2YzIfwAoNshXS/sp+Nwb/2YFjZb0+ZOpr6M1aPZhC3GwB9d/HAJ95wFxJUe2O8y0cVYk2flg+ei1PWvmeRvAGCfMCjyllOZEu2Y1gd6NfBUefdKvDgMTzR8zicvqS/4WZ0jj6rff4Q04qMTiESXmOwzqtSp1IlXAm47n9kU7B/8IYbvzdr6C3LpgJ4jwzA20oW15p1zj47ejGqU+IgQbDKKoXtYKhWRTknC8r8z4YwHFWzT4YsmJOc7Ai8+crCTfmJxVgviYftwRyW+1Km76G35+wjY6wnLJIiG5RIQXnrw9Qg/+pqT7uFnxwwaONYr7c9IWVJV82rBDURYtPQPkL+m5gPTdAd6SNj73IkRzfBac+lWoupWIlaCyPvwF1vpVMJR8o14qvHn+h6kIyJrMS86Xe6wlsm/q2f8GlikuLmojbiLoCjQxyWYOnTNkNr4aA8ya8h4vc4KOOwGo1uSCenxRjpXMnqN75beV9ESMfCgU/B1RK5ti6PGq3qkExRCN2rIRzTg3nbNxDcc2mQNbjBMqWsrn1w3yuC+4lU4l0dDiOHwUB2qW+a+iBhxepKUaK7amLnQBXTqZSrGfvhnV4jKTp33cEn+6u1LkHDBn1Jpp0R7lRqDxNz06yrmDEe0PhCoVJ2QleWAsSFHHYFCQP/dFKTbaYaHDnqZXktx+T2RRdTY9zlnNHZsPxOZKgz0c3tTABZsx6h7hMDb8xZ1GLoDN46+MbKaPbNWEygLJmhtuXgNlQ0LZFw/d87GJG9Uv09+CKkPi7+53+cQ/bBANPSqr0mYDobcw4hGcVfL6/U6/jdvRjFN+57HLbTe+SeCih9ng3VIS2XMomQZZSBjT73JFolEMqjaLT0A3BiGTxQri26ZyvVUTg+q2zUDubBRl4IJGuBOhcLHNH8drotzDE+DxQkkILQE2jO7kX16f5J3Uv4sUnAdhCKAcieuWxBL8ENFTQC3F3jpiEeijR7vfXvLgQ3m+ramHUUh0t87bCVZULhK8Xfi1giEUWbYFp3t0b7ts3j7lnLXyGXkNZp/FnGNJjCSF/GmTmLCkAvCP1XTVFmuTYF8zJHFjf1PMWZXp+cXTEof9n/05UXtNhiD+qO0pmVOpWkIp2EtA7/alDfSgBm99aXFIDFNBtHmdbr5FctWyrY3ScRRW/jqSnjDXEt94rRSWPSBUw3L5/aCc/mtozc51jgj4CulNm0FnRVYi60UDaRBTasQtjadLaG1JkHqTjhNJDG10vGaZxiA//FROxNOkHvpaHFTqc6LO2QO5AoeYBpCWjS+Dg2KPSKxDJ9ihgpfDQCVvPfSGnQWIdM4vLAh75lc4gdWa8LdKAhZe3jtCKsSmFyiIad2BLpHaimssUdwoCztcCTCiHZqqSjild3wK8X+g41UAesdobUcYciRPRXlbO/T/N5lH9B2ktgeW+uo2/EJu2wdrEhpb0sPikCYYUYi6ufIB8+DD2e0qZtx6wOqEg5a1qnvmLUKc/dR15pUovbJVYhcO042gZpe8SsPHHApvjai88ztCM7lNd//9q82OCNjag="}]}