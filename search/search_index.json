{"config":{"indexing":"full","lang":["en","fr"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"index.html","text":"Bases de Donn\u00e9es NoSQL avec MongoDB \u00b6 Objectifs \u00b6 Installer MongoDB et cr\u00e9er une base de donn\u00e9es Interroger une base de donn\u00e9es orient\u00e9e document Prot\u00e9ger la base de donn\u00e9es contre les pannes avec le ReplicaSet Passer \u00e0 l'\u00e9chelle avec le Sharding Ressources \u00b6 Outils MongoDB Community Server V4.4.1 (Windows 10) ou V4.0.2 (Windows 7 ou 8) MongoDB Shell V0.4.2 (Ex\u00e9cuter des commandes int\u00e9ractives) MongoCompass V1.22.1 (GUI pour MongoDB) Fichiers de donn\u00e9es (datasets) restaurants.json : 25359 restaurants de New York cities.csv : 15000 villes du monde Sources et r\u00e9f\u00e9rence Documentation MongoDB Tutorial MongoDB Sharding sous Windows Ma\u00eetrisez les bases de donn\u00e9es NoSQL Openclassrooms Pr\u00e9sentation de MongoDB \u00b6 Vocabulaire \u00b6 MongoDB est un syst\u00e8me de gestion de bases de donn\u00e9es NoSQL orient\u00e9 documents. Il est parmi les SGBD les plus utilis\u00e9s. Source : https://db-engines.com/en/ranking_trend Le document est l'unit\u00e9 de r\u00e9f\u00e9rence dans ce syst\u00e8me. Elle est l'\u00e9quivalent de tuple ou enregistrement dans les bases de donn\u00e9es relationnelles. MongoDB g\u00e8re plusieurs bases de donn\u00e9es . Chaque base est compos\u00e9e de Collections (\u00e9quivalent de table). La struture d'un document MongoDB ressemb\u00e9e \u00e0 celle de JSON. Le mod\u00e8le est tr\u00e8s simple : Tout est cl\u00e9/valeur : \"cl\u00e9\" : \"valeur\". Un document est encapsul\u00e9 dans des accolades {...}, pouvant contenir des listes de cl\u00e9s/valeurs. Une valeur peut \u00eatre un type scalaire (entier, nombre, texte, bool\u00e9en, null), des listes de valeurs [...], ou des documents imbriqu\u00e9s. Sch\u00e9ma de la base MongoDB MongoDB ne g\u00e8re aucun sch\u00e9ma pour les collections. Donc pas de structure fixe ni de typage. Du coup, il est difficile lors de l\u2019interrogation de conna\u00eetre le contenu de la base de donn\u00e9es. Le logiciel Compass permet de faire une analyse du sch\u00e9ma et fournit des statistiques sur les types des cl\u00e9s et les fr\u00e9quences des valeurs. Exemple de document MongoDB { \"_id\" : { \"$oid\" : \"5f7cefe98c3d2e2bd862b3ff\" }, \"address\" : { \"building\" : \"469\" , \"coord\" : { \"type\" : \"Point\" , \"coordinates\" : [ - 73.961704 , 40.662942 ] }, \"street\" : \"Flatbush Avenue\" , \"zipcode\" : \"11225\" }, \"borough\" : \"Brooklyn\" , \"cuisine\" : \"Hamburgers\" , \"grades\" : [ { \"date\" : { \"$date\" : \"2014-12-30T00:00:00.000Z\" }, \"grade\" : \"A\" , \"score\" : 8 }, { \"date\" : { \"$date\" : \"2014-07-01T00:00:00.000Z\" }, \"grade\" : \"B\" , \"score\" : 23 }, { \"date\" : { \"$date\" : \"2013-04-30T00:00:00.000Z\" }, \"grade\" : \"A\" , \"score\" : 12 }, { \"date\" : { \"$date\" : \"2012-05-08T00:00:00.000Z\" }, \"grade\" : \"A\" , \"score\" : 12 } ], \"name\" : \"Wendy'S\" , \"restaurant_id\" : \"30112340\" } Ce restaurant a un nom, un quartier (borough), le type de cuisine, une adresse (document imbriqu\u00e9, avec coordonn\u00e9es GPS, rue et code postale), et un ensemble de notes (tableaux de documents). Note La cl\u00e9 \"_id:\" est l'identifiant du document. Si sa valeur n'est pas sp\u00e9cifi\u00e9e implicitement lors de l'insertion, elle est automatiquement initialis\u00e9e par MongoDB.","title":"Introduction"},{"location":"index.html#bases-de-donnees-nosql-avec-mongodb","text":"","title":"Bases de Donn\u00e9es NoSQL avec MongoDB"},{"location":"index.html#objectifs","text":"Installer MongoDB et cr\u00e9er une base de donn\u00e9es Interroger une base de donn\u00e9es orient\u00e9e document Prot\u00e9ger la base de donn\u00e9es contre les pannes avec le ReplicaSet Passer \u00e0 l'\u00e9chelle avec le Sharding","title":"Objectifs"},{"location":"index.html#ressources","text":"Outils MongoDB Community Server V4.4.1 (Windows 10) ou V4.0.2 (Windows 7 ou 8) MongoDB Shell V0.4.2 (Ex\u00e9cuter des commandes int\u00e9ractives) MongoCompass V1.22.1 (GUI pour MongoDB) Fichiers de donn\u00e9es (datasets) restaurants.json : 25359 restaurants de New York cities.csv : 15000 villes du monde Sources et r\u00e9f\u00e9rence Documentation MongoDB Tutorial MongoDB Sharding sous Windows Ma\u00eetrisez les bases de donn\u00e9es NoSQL Openclassrooms","title":"Ressources"},{"location":"index.html#presentation-de-mongodb","text":"","title":"Pr\u00e9sentation de MongoDB"},{"location":"index.html#vocabulaire","text":"MongoDB est un syst\u00e8me de gestion de bases de donn\u00e9es NoSQL orient\u00e9 documents. Il est parmi les SGBD les plus utilis\u00e9s. Source : https://db-engines.com/en/ranking_trend Le document est l'unit\u00e9 de r\u00e9f\u00e9rence dans ce syst\u00e8me. Elle est l'\u00e9quivalent de tuple ou enregistrement dans les bases de donn\u00e9es relationnelles. MongoDB g\u00e8re plusieurs bases de donn\u00e9es . Chaque base est compos\u00e9e de Collections (\u00e9quivalent de table). La struture d'un document MongoDB ressemb\u00e9e \u00e0 celle de JSON. Le mod\u00e8le est tr\u00e8s simple : Tout est cl\u00e9/valeur : \"cl\u00e9\" : \"valeur\". Un document est encapsul\u00e9 dans des accolades {...}, pouvant contenir des listes de cl\u00e9s/valeurs. Une valeur peut \u00eatre un type scalaire (entier, nombre, texte, bool\u00e9en, null), des listes de valeurs [...], ou des documents imbriqu\u00e9s. Sch\u00e9ma de la base MongoDB MongoDB ne g\u00e8re aucun sch\u00e9ma pour les collections. Donc pas de structure fixe ni de typage. Du coup, il est difficile lors de l\u2019interrogation de conna\u00eetre le contenu de la base de donn\u00e9es. Le logiciel Compass permet de faire une analyse du sch\u00e9ma et fournit des statistiques sur les types des cl\u00e9s et les fr\u00e9quences des valeurs. Exemple de document MongoDB { \"_id\" : { \"$oid\" : \"5f7cefe98c3d2e2bd862b3ff\" }, \"address\" : { \"building\" : \"469\" , \"coord\" : { \"type\" : \"Point\" , \"coordinates\" : [ - 73.961704 , 40.662942 ] }, \"street\" : \"Flatbush Avenue\" , \"zipcode\" : \"11225\" }, \"borough\" : \"Brooklyn\" , \"cuisine\" : \"Hamburgers\" , \"grades\" : [ { \"date\" : { \"$date\" : \"2014-12-30T00:00:00.000Z\" }, \"grade\" : \"A\" , \"score\" : 8 }, { \"date\" : { \"$date\" : \"2014-07-01T00:00:00.000Z\" }, \"grade\" : \"B\" , \"score\" : 23 }, { \"date\" : { \"$date\" : \"2013-04-30T00:00:00.000Z\" }, \"grade\" : \"A\" , \"score\" : 12 }, { \"date\" : { \"$date\" : \"2012-05-08T00:00:00.000Z\" }, \"grade\" : \"A\" , \"score\" : 12 } ], \"name\" : \"Wendy'S\" , \"restaurant_id\" : \"30112340\" } Ce restaurant a un nom, un quartier (borough), le type de cuisine, une adresse (document imbriqu\u00e9, avec coordonn\u00e9es GPS, rue et code postale), et un ensemble de notes (tableaux de documents). Note La cl\u00e9 \"_id:\" est l'identifiant du document. Si sa valeur n'est pas sp\u00e9cifi\u00e9e implicitement lors de l'insertion, elle est automatiquement initialis\u00e9e par MongoDB.","title":"Vocabulaire"},{"location":"advanced.html","text":"Op\u00e9rations avanc\u00e9es \u00b6 Agr\u00e9gations \u00b6 Fonction aggregate \u00b6 MongoDB fournit la fonction aggregate qui permet de cr\u00e9er un pipeline (s\u00e9quence) d'op\u00e9rations ou stage (\u00e9tape). Elle poss\u00e8de 2 param\u00e8tres : un tableau d'op\u00e9rations et JSON optionnel pour les options d'ex\u00e9cution. aggregate > db . collection . aggregate ([ { operation1 : {}}, { operation2 : {}}, ... ], { option1 : value , option2 : value , ... } ); Op\u00e9rateurs d'agr\u00e9gation (stages) \u00b6 Op\u00e9rateurs simples \u00b6 {$match: {<query>}} : C\u2019est une op\u00e9ration de filtrage exactement comme le premier param\u00e8tre de la requ\u00eate find. {$project: {champ1:1|0, ...}} : C\u2019est le second param\u00e8tre du find. Il donne le format de sortie des documents (projection). Il peut par ailleurs \u00eatre utilis\u00e9 pour changer le format d\u2019origine. {$sort: {champ1:1|-1,....}} : Trier le r\u00e9sultat final sur les valeurs d\u2019une cl\u00e9 choisi. Exemples Exemple1 Afficher le nom et l'adresse des restaurants dont le nom comporte \"Staten Island\". MongoDB SQL //avec find > db . restaurants . find ({ name : /Staten Island/ }, { _id : 0 , name : 1 , address : 1 } ); //avec aggregate > db . restaurants . aggregate ([ { $match : { name : /Staten Island/ }}, { $project : { _id : 0 , name : 1 , address : 1 }} ]); SELECT name , address FROM restaurants WHERE name like '%Staten Island%' Trier le r\u00e9sultat selon l'ordre d\u00e9croissant du nom. MongoDB SQL > db . restaurants . aggregate ([ { $match : { name : /Staten Island/ }}, { $project : { _id : 0 , name : 1 , address : 1 }}, { $sort : { name :- 1 }} ]); SELECT name , address FROM restaurants WHERE name like '%Staten Island%' ORDER BY name DESC Trier le r\u00e9sultat selon l'ordre d\u00e9croissant du nom. Groupage et agr\u00e9gats \u00b6 {$group: {_id: <expression>, <champAgr\u00e9g\u00e91>: { <accumulator1> : <expression1> },...}} : C\u2019est l\u2019op\u00e9ration d\u2019agr\u00e9gation. Il va permettre de grouper les documents par valeur, et appliquer des fonctions d\u2019agr\u00e9gat. La sortie est une nouvelle collection avec les r\u00e9sultats de l\u2019agr\u00e9gation. _id est le champ du groupement (pr\u00e9c\u00e9der le nom du champ valeur par $). accumulateur1 est une fonction d'agr\u00e9gation : $min, $max, $sum, $avg {$unwind : <$champTableau>} : Cr\u00e9e n documents \u00e0 partir d'un tableau. Il peut \u00eatre consid\u00e9r\u00e9 comme une jointure entre le document en cours de collection et le champ tableau. Le nom du champ est pr\u00e9c\u00e9d\u00e9 par $. Exemple2 Calculer le nombre de restaurants total. MongoDB SQL > db . restaurants . aggregate ([ { $group : { _id : null , Total : { $sum : 1 }} } ]); SELECT count * as Total FROM restaurants Calculer le nombre de restaurants total par quartier. MongoDB SQL > db . restaurants . aggregate ([ { $group : { _id : \"$borough\" , Total : { $sum : 1 }} } ]); SELECT borough , count * as Total FROM restaurants GROUP BY borough Calculer le score moyen des restaurants dont le nom contient \"Staten Island\". Puisque le score est dans le tableau grades, il faut transformer ce tableau avec $unwind. Chaque stage du pipeline peut \u00eatre sauvegard\u00e9 dans une variable pour \u00eatre utilis\u00e9 dans plusieurs requ\u00eates. MongoDB SQL > var filtrage = { $match : { name : /Staten Island/ }}; > var decomposerGrades = { $unwind : \"$grades\" }; > var groupage = { $group : { _id : \"$_id\" , \"Score moyen\" : { $avg : \"$grades.score\" }}}; > db . restaurants . aggregate ([ filtrage , decomposerGrades , groupage ]); On suppose que grades est un table pr\u00e9sente dans la base de donn\u00e9es. SELECT _id , AVG ( grades . score ) \"Score moyen\" FROM restaurants JOIN grades WHERE name like '%Staten Island%' GROUP BY ( _id ) Jointure \u00b6 Nous pr\u00e9sentons ici la syntaxe la plus simple pour une \u00e9qui-jointure. {$lookup: {from: <collection2>, localField: <champInterne>,foreignField: <chamCollection2>, as: <nouveauChampTableau>}} : Cet op\u00e9rateur effectue une jointure (left outer join) avec une autre collection de la base. Exemple3 Soit une collection des managers des restaurants \u00e0 laquelle on ins\u00e8re un document : > db . createCollection ( \"managers\" ); > db . managers . insert ({ name : \"Alain Delon\" , age : 50 , res_id : \"30075445\" }); Effectuer la jointure entre managers et restaurants MongoDB SQL > db . managers . aggregate ([ { $lookup : { from : \"restaurants\" , localField : \"res_id\" , foreignField : \"restaurant_id\" , as : \"Restaurant\" } } ]); SELECT * , Restaurant FROM managers WHERE Restaurant in ( SELECT * FROM restaurants WHERE restaurant_id = res_id ) Sortie \u00b6 {$out: <collection> | {db:<base>, coll:<collection}} : Cet op\u00e9rateur sp\u00e9cifie la base et la collection o\u00f9 le r\u00e9sultat sera ins\u00e9r\u00e9. Exemple 4 Pour enregistrer le r\u00e9sultat de la premi\u00e8re requ\u00eate de l'exemple 1. MongoDB SQL > db . restaurants . aggregate ([ { $match { name : /Staten Island/ }, { $project : { _id : 0 , name : 1 , address : 1 }}, { $out : \"staten\" } ]); CREATE TABLE staten AS ( SELECT name , address FROM restaurants WHERE name like '%Staten Island%' );","title":"Op\u00e9rations avanc\u00e9es"},{"location":"advanced.html#operations-avancees","text":"","title":"Op\u00e9rations avanc\u00e9es"},{"location":"advanced.html#agregations","text":"","title":"Agr\u00e9gations"},{"location":"advanced.html#fonction-aggregate","text":"MongoDB fournit la fonction aggregate qui permet de cr\u00e9er un pipeline (s\u00e9quence) d'op\u00e9rations ou stage (\u00e9tape). Elle poss\u00e8de 2 param\u00e8tres : un tableau d'op\u00e9rations et JSON optionnel pour les options d'ex\u00e9cution. aggregate > db . collection . aggregate ([ { operation1 : {}}, { operation2 : {}}, ... ], { option1 : value , option2 : value , ... } );","title":"Fonction aggregate"},{"location":"advanced.html#operateurs-dagregation-stages","text":"","title":"Op\u00e9rateurs d'agr\u00e9gation (stages)"},{"location":"advanced.html#operateurs-simples","text":"{$match: {<query>}} : C\u2019est une op\u00e9ration de filtrage exactement comme le premier param\u00e8tre de la requ\u00eate find. {$project: {champ1:1|0, ...}} : C\u2019est le second param\u00e8tre du find. Il donne le format de sortie des documents (projection). Il peut par ailleurs \u00eatre utilis\u00e9 pour changer le format d\u2019origine. {$sort: {champ1:1|-1,....}} : Trier le r\u00e9sultat final sur les valeurs d\u2019une cl\u00e9 choisi. Exemples Exemple1 Afficher le nom et l'adresse des restaurants dont le nom comporte \"Staten Island\". MongoDB SQL //avec find > db . restaurants . find ({ name : /Staten Island/ }, { _id : 0 , name : 1 , address : 1 } ); //avec aggregate > db . restaurants . aggregate ([ { $match : { name : /Staten Island/ }}, { $project : { _id : 0 , name : 1 , address : 1 }} ]); SELECT name , address FROM restaurants WHERE name like '%Staten Island%' Trier le r\u00e9sultat selon l'ordre d\u00e9croissant du nom. MongoDB SQL > db . restaurants . aggregate ([ { $match : { name : /Staten Island/ }}, { $project : { _id : 0 , name : 1 , address : 1 }}, { $sort : { name :- 1 }} ]); SELECT name , address FROM restaurants WHERE name like '%Staten Island%' ORDER BY name DESC Trier le r\u00e9sultat selon l'ordre d\u00e9croissant du nom.","title":"Op\u00e9rateurs simples"},{"location":"advanced.html#groupage-et-agregats","text":"{$group: {_id: <expression>, <champAgr\u00e9g\u00e91>: { <accumulator1> : <expression1> },...}} : C\u2019est l\u2019op\u00e9ration d\u2019agr\u00e9gation. Il va permettre de grouper les documents par valeur, et appliquer des fonctions d\u2019agr\u00e9gat. La sortie est une nouvelle collection avec les r\u00e9sultats de l\u2019agr\u00e9gation. _id est le champ du groupement (pr\u00e9c\u00e9der le nom du champ valeur par $). accumulateur1 est une fonction d'agr\u00e9gation : $min, $max, $sum, $avg {$unwind : <$champTableau>} : Cr\u00e9e n documents \u00e0 partir d'un tableau. Il peut \u00eatre consid\u00e9r\u00e9 comme une jointure entre le document en cours de collection et le champ tableau. Le nom du champ est pr\u00e9c\u00e9d\u00e9 par $. Exemple2 Calculer le nombre de restaurants total. MongoDB SQL > db . restaurants . aggregate ([ { $group : { _id : null , Total : { $sum : 1 }} } ]); SELECT count * as Total FROM restaurants Calculer le nombre de restaurants total par quartier. MongoDB SQL > db . restaurants . aggregate ([ { $group : { _id : \"$borough\" , Total : { $sum : 1 }} } ]); SELECT borough , count * as Total FROM restaurants GROUP BY borough Calculer le score moyen des restaurants dont le nom contient \"Staten Island\". Puisque le score est dans le tableau grades, il faut transformer ce tableau avec $unwind. Chaque stage du pipeline peut \u00eatre sauvegard\u00e9 dans une variable pour \u00eatre utilis\u00e9 dans plusieurs requ\u00eates. MongoDB SQL > var filtrage = { $match : { name : /Staten Island/ }}; > var decomposerGrades = { $unwind : \"$grades\" }; > var groupage = { $group : { _id : \"$_id\" , \"Score moyen\" : { $avg : \"$grades.score\" }}}; > db . restaurants . aggregate ([ filtrage , decomposerGrades , groupage ]); On suppose que grades est un table pr\u00e9sente dans la base de donn\u00e9es. SELECT _id , AVG ( grades . score ) \"Score moyen\" FROM restaurants JOIN grades WHERE name like '%Staten Island%' GROUP BY ( _id )","title":"Groupage et agr\u00e9gats"},{"location":"advanced.html#jointure","text":"Nous pr\u00e9sentons ici la syntaxe la plus simple pour une \u00e9qui-jointure. {$lookup: {from: <collection2>, localField: <champInterne>,foreignField: <chamCollection2>, as: <nouveauChampTableau>}} : Cet op\u00e9rateur effectue une jointure (left outer join) avec une autre collection de la base. Exemple3 Soit une collection des managers des restaurants \u00e0 laquelle on ins\u00e8re un document : > db . createCollection ( \"managers\" ); > db . managers . insert ({ name : \"Alain Delon\" , age : 50 , res_id : \"30075445\" }); Effectuer la jointure entre managers et restaurants MongoDB SQL > db . managers . aggregate ([ { $lookup : { from : \"restaurants\" , localField : \"res_id\" , foreignField : \"restaurant_id\" , as : \"Restaurant\" } } ]); SELECT * , Restaurant FROM managers WHERE Restaurant in ( SELECT * FROM restaurants WHERE restaurant_id = res_id )","title":"Jointure"},{"location":"advanced.html#sortie","text":"{$out: <collection> | {db:<base>, coll:<collection}} : Cet op\u00e9rateur sp\u00e9cifie la base et la collection o\u00f9 le r\u00e9sultat sera ins\u00e9r\u00e9. Exemple 4 Pour enregistrer le r\u00e9sultat de la premi\u00e8re requ\u00eate de l'exemple 1. MongoDB SQL > db . restaurants . aggregate ([ { $match { name : /Staten Island/ }, { $project : { _id : 0 , name : 1 , address : 1 }}, { $out : \"staten\" } ]); CREATE TABLE staten AS ( SELECT name , address FROM restaurants WHERE name like '%Staten Island%' );","title":"Sortie"},{"location":"crud.html","text":"Op\u00e9rations de base \u00b6 Format des commandes MongoDB \u00b6 Format des appels //Appel d'op\u00e9ration sur la base en cours > db . operation (); //Appel d'op\u00e9ration sur la collection > db . collection . operation (); Manipulation des bases de donn\u00e9es \u00b6 Lister les bases \u00b6 show Voir les bases existantes > show dbs Pour voir la base s\u00e9lectionn\u00e9e > db S\u00e9lectionner ou cr\u00e9er une BD \u00b6 C'est la base qui sera active et repr\u00e9sente par le pr\u00e9fixe db . Toutes les op\u00e9rations ex\u00e9cut\u00e9es ensuite sont ex\u00e9cut\u00e9es sur cette base. use > use nom_base Example Cr\u00e9er une base bibliotheque > use bibliotheque Supprimer la base de donn\u00e9es en cours \u00b6 dropDatabse > db . dropDatabse (); Afficher la liste des op\u00e9rations sur une BD > db . help (); Les collections de la base en cours \u00b6 Cr\u00e9ation de collection > db . createCollection ( \"nom\" ) Exemple Cr\u00e9er une collection livres > db . createCollection ( \"livres\" ); Lister les collections > show collections Supprimer une collection > db . nom_collection . drop (); Insertion de documents \u00b6 Un document est ins\u00e9r\u00e9 dans une collection. Il est possible d'utiliser les m\u00e9thodes insert() , insertOne() ou insertMany() . Exemple > db . livres . insert ({ \"Titre\" : \"Mongodb: the definitive guide, 2nd edition\" , \"Cat\u00e9gorie\" : \"Informatique\" , \"Pages\" : 434 , \"Ann\u00e9e\" : 2013 , \"Prix\" : 42.73 , \"R\u00e9sum\u00e9\" : \"This updated second edition provides guidance for database developers, advanced configuration for system administrators, and an overview of the concepts and use cases for other people on your project.\" , \"Langue\" : \"EN\" , \"ISBN\" : 9781449344689 , \"Editeur\" : { \"Nom\" : \"\" , \"Pays\" : \"\" }, \"Auteurs\" : [{ \"Nom\" : \"Chodorow\" , \"Pr\u00e9nom\" : \"Kristina\" }], \"Mots cl\u00e9s\" : [ \"MongoDB\" , \"NoSQL\" , \"Database\" ] }); Exercice Ajouter le livre ayant cette couverture : Note MongoDB associe un identifiant unique \u00e0 chaque document appel\u00e9 _id , et lui attribue une valeur si elle n\u2019est pas indiqu\u00e9e explicitement. MongoDB ne fait aucun contr\u00f4le de structure ou autres contraintes sur les donn\u00e9es. Ces contr\u00f4les seront r\u00e9alis\u00e9es. Importation de donn\u00e9es \u00b6 Pour alimenter la base avec des donn\u00e9es existantes dans un format support\u00e9 (JSON, CSV, TSV), utiliser Compass. T\u00e9l\u00e9charger restaurants.json et d\u00e9compresser son contenu. Cr\u00e9er une base de donn\u00e9es \"emplacements\". Cr\u00e9er une collection \"restaurants\". S\u00e9lectionner la collection \"restaurants\" et cliquer sur le bouton \"Add data\" puis Import file . S\u00e9lectionner le fichier restaurants.json et importer. Interrogation \u00b6 C'est la m\u00e9thode find() qui r\u00e9alise l'interrogation dans MongoDB. Les requ\u00eates seront effectu\u00e9es sur la base de donn\u00e9es des restaurants import\u00e9e pr\u00e9c\u00e9demment : use emplacements Format de la m\u00e9thpde find() \u00b6 find poss\u00e8de 2 param\u00e8tres optionnels repr\u00e9sent\u00e9s \u00e9galement en format JSON. Le premier repr\u00e9sente la requ\u00eate de filtrage (clause WHERE en SQL). Le second param\u00e8tre exprime l'op\u00e9ration la projection. find > db . collection . find ( query , projection ); Projection \u00b6 { cl\u00e9 :< 0 , 1 > } 0 : exclusion, 1 : inclusion L'identifiant _id est implicitement inclus dans le r\u00e9sultat. Pour l'exclure, ajouter _id:0 . Il n'est pas possible de m\u00e9langer inclusions et exclusions sauf pour le champ _id. Pour acc\u00e9der \u00e0 un champ d'un document imbriqu\u00e9, utiliser . : champ1.champ2 . Exemples Afficher les noms des restaurants et leurs sp\u00e9cialit\u00e9s (cuisine). MongoDB SQL > db . restaurants . find ({},{ name : 1 , cuisine : 1 }); SELECT name , cuisine FROM restaurants Afficher tous les noms des restaurants et la rue (street) et pas le _id. MongoDB SQL > db . restaurants . find ({},{ name : 1 , \"address.street\" : 1 , _id : 0 }); SELECT name , street FROM restaurants Contenu de collection \u00b6 find() affiche le contenu de la collection tandis que count() retourne le nombre de documents de la collection. Exemple MongoDB SQL > db . restaurants . find () > db . restaurants . count () SELECT * FROM restaurants SELECT count ( * ) FROM restaurants S\u00e9lection \u00b6 Par valeur exacte La condition d'\u00e9galit\u00e9 est exprim\u00e9e par champ : valeur . Exemples Trouver les restaurants du quartier Brooklyn. MongoDB SQL > db . restaurants . find ( { \"borough\" : \"Brooklyn\" } ); SELECT * FROM restaurants WHERE borough = 'Brooklyn' Trouver les restaurants du quartier Brooklyn offrant la cuisine italienne. MongoDB SQL > db . restaurants . find ( { \"borough\" : \"Brooklyn\" , \"cuisine\" : \"Italian\" } ) SQL SELECT * FROM restaurants WHERE borough = 'Brooklyn' and cuisine = 'Italian' Trouver les restaurants sans nom ( null ). MongoDB SQL > db . restaurants . find ( { \"name\" : null } ); SELECT * FROM restaurants WHERE name IS NULL Expressions r\u00e9guli\u00e8res Avec les champs de type texte, MongoDB accepte les expressions r\u00e9guli\u00e8res sous le format \"champ\" : /regex/options . Option Description i insensible \u00e0 la casse. m Multiligne. Exemples Trouver les restaurants dont le nom contient Pizza sans prendre en compte la casse. MongoDB SQL > db . restaurants . find ( { \"name\" : /pizza/i }); SELECT * FROM restaurants WHERE upper ( name ) like '%PIZZA%' Trouver les restaurants dont le nom commence par 'A'. MongoDB SQL > db . restaurants . find ( { \"name\" : /^A/ }); SELECT * FROM restaurants WHERE name like 'A%' Trouver les restaurants dont le nom est compos\u00e9 de 7 caract\u00e8res. MongoDB SQL > db . restaurants . find ( { \"name\" : /^.{7}$/ }); SELECT * FROM restaurants WHERE name like '_______' Filtrage avec op\u00e9rateurs \u00b6 Pour construire les crit\u00e8res de s\u00e9lection, plusieurs op\u00e9rateurs peuvent \u00eatre utilis\u00e9s dans la requ\u00eate selon le format : { champ1 : { < op\u00e9rateur >:< valeur1 > , ...} Les op\u00e9rateurs Op\u00e9rateur R\u00f4le Exemple $gt, $gte >,>= \"champ\" : { \"$gt\" : 10 } $lt, $lte <,<= \"champ\" : { \"$lt\" : 10 } $ne != \"champ\" : { \"$ne\" : 10 } $in, $nin IN, NOT IN \"champ\" : { \"$in\" : [ 10 , 20 , 30 ]} $or ou logique \"$or\" : [{ \"champ\" : { \"$gt\" : 10 }},{ \"champ\" : { \"$lt\" : 5 }}] $and et logique \"$and\" : [{ \"champ\" : { \"$gt\" : 10 }},{ \"champ\" : { \"$lt\" : 5 }}] $not n\u00e9gation \"champ\" : { \"$not\" : { \"$gt\" : 10 }} $exists Existence de la cl\u00e9 dans le document \"champ\" : { \"$exists\" : 1 } $size taille d'une champ array \"champTableau\" : { \"$size\" : 5 } $elemMatch v\u00e9rification conjointe de plusieurs conditions sur un \u00e9l\u00e9ment du tableau \"champTableau\" : { $elemMatch : { \"champInterne\" : { $gt : 5 }}} Exemples Exemple 1 Trouver les noms et scores des restaurants de Manhattan ayant re\u00e7u au moins un score inf\u00e9rieur \u00e0 10. MongoDB > db . restaurants . find ( { borough : \"Manhattan\" , \"grades.score\" : { \"$lt\" : 10 } }, { name : 1 , \"grades.score\" : 1 , _id : 0 }); Exemple 2 Trouver les noms et scores des restaurants de Manhattan avec des scores tous inf\u00e9rieur \u00e0 10. MongoDB > db . restaurants . find ( { borough : \"Manhattan\" , \"grades.score\" : { $not : { \"$gte\" : 10 }} }, { name : 1 , \"grades.score\" : 1 , _id : 0 }); Exemple 3 Trouver les restaurants qui ont une \u00e9valuation ayant un grade \u2018C\u2019 avec un score inf\u00e9rieur \u00e0 40. MongoDB > db . restaurants . find ({ \"grades\" : { $elemMatch : { \"grade\" : \"C\" , \"score\" : { $lt : 40 } } } }, { \"grades.grade\" : 1 , \"grades.score\" : 1 , _id : 0 }); $elemMatch permet de v\u00e9rifier les conditions sur le m\u00eame \u00e9l\u00e9ment du tableau. Sans cet op\u00e9rateur on obtient des \u00e9valuations avec des scores diff\u00e9rents de 30 ou des grades diff\u00e9rents de C. V\u00e9rifier les r\u00e9sultats de la requ\u00eate sans elemMatch : > db . restaurants . find ({ \"grades.grade\" : \"C\" , \"grades.score\" : { $lt : 30 } }, { \"grades.grade\" : 1 , \"grades.score\" : 1 }); Exemple 4 Trouver les restaurants qui ont une exactement 4 \u00e9valuations. MongoDB > db . restaurants . find ({ \"grades\" : { $size : 4 } }); Exemple 5 Trouver les restaurants qui ont une longitude (la premi\u00e8re valeur de coordinates) < -100. MongoDB > db . restaurants . find ({ \"address.coord.coordinates.0\" : { $lt :- 100 } }); Distinct Pour d\u00e9terminer les valeurs distinctes d'un champ. Exemples Trouver les diff\u00e9rents quartiers. MongoDB SQL > db . restaurants . distinct ( \"borough\" ); SELECT distinct borough FROM restaurants Trouver l'intervalle des scores. MongoDB > db . restaurants . distinct ( \"grades.score\" ); Mise \u00e0 jour \u00b6 Update > db . collection . update ( { filtre }, { < op\u00e9rateurUpdate >: { < champ1 >:< valeur1 > ,....}, < op\u00e9rateurUpdate >: { < champ1 >:< valeur1 > ,....}, .... }, { \"multi\" : true | false , //mise \u00e0 jour de plusieurs documents - par d\u00e9faut false \"upsert\" : true | false //insertion si aucun document ne correspond - par d\u00e9faut false } ); Op\u00e9rateurs de mise \u00e0 jour Op\u00e9rateur Description Exemple $currentDate Affecter \u00e0 un champ la date en cours $currentDate : { \"champ\" : true } $inc, $mul Incr\u00e9menter resp. multiplier la valeur d'un champ par une valeur $inc : { \"champ\" : 5 } $min, $max Modifie le champ si la nouvelle valeur est inf\u00e9rieure resp. sup\u00e9rieure \u00e0 la valeur actuelle. $min : { \"champ\" : 10 } $rename Renommer un champ. $rename : { \"champ\" : \"nouveauChamp\" } $set Affecte une valeur au champ sp\u00e9cifi\u00e9 et l'ajoute s'il n'existe pas. $set : { \"champ\" : 2 } $unset Supprime le champ du document. $unset : { \"champ\" : \"\" } $pop Supprime le premier ou dernier \u00e9l\u00e9ment d'un champ tableau. $pop : { \"champTableau\" :- 1 } -1: premier, 1:dernier $pull Supprime les \u00e9l\u00e9ments qui v\u00e9rifient la condition. $pull : { \"champTableau\" : condition } $push Ajoute un ou plusieurs \u00e9l\u00e9ments au tableau \u00e0 une position. $push : { \"champTableau\" : { $each : [ valeur1 , valeur2 ,...], $position : positionInsertion }} Exemples Exemple 1 Modifier le champ borough en 'Manhattan' et affecter la date actuelle au champ lastupdate du restaurant appel\u00e9 \"The Movable Feast\". MongoDB SQL > db . restaurants . update ( { \"name\" : \"The Movable Feast\" }, { $set : { \"borough\" : \"Manhattan\" }, $currentDate : { \"lastUpdated\" : true } } ); UPDATE restaurants SET borough = 'Manhattan' , lastUpdated = sysdate , WHERE name = 'The Movable Feast' Exemple 2 Supprimer le champ cuisine et ajouter 2 point au premier score du restaurant \"The Movable Feast\" MongoDB > db . restaurants . update ( { \"name\" : \"The Movable Feast\" }, { $unset : { \"cuisine\" : \"\" }, $inc : { \"grades.0.score\" : 2 }, } ); Exemple 3 Ajouter un commentaire avec la valeur acceptable pour les restaurants qui n'ont pas eu le grade 'C'. MongoDB > db . restaurants . update ( { \"grades.grade\" : { $not : { $eq : \"C\" }}}, { $set : { \"comment\" : \"acceptable\" }}, { \"multi\" : true } ); Exercice Donner la commande qui permet d'annuler celle de l'exemple 2. Suppression \u00b6 Remove > db . collection . remove ( { filtre }, { justOne : true | false } //Optionnel par d\u00e9faut false ); Exemple Supprimer tous les restaurants dont le nom commence par M. MongoDB SQL > db . restaurants . remove ({ name : /^M.*/ }); DELETE FROM restaurants WHERE name like 'M%' ;","title":"Op\u00e9rations de base"},{"location":"crud.html#operations-de-base","text":"","title":"Op\u00e9rations de base"},{"location":"crud.html#format-des-commandes-mongodb","text":"Format des appels //Appel d'op\u00e9ration sur la base en cours > db . operation (); //Appel d'op\u00e9ration sur la collection > db . collection . operation ();","title":"Format des commandes MongoDB"},{"location":"crud.html#manipulation-des-bases-de-donnees","text":"","title":"Manipulation des bases de donn\u00e9es"},{"location":"crud.html#lister-les-bases","text":"show Voir les bases existantes > show dbs Pour voir la base s\u00e9lectionn\u00e9e > db","title":"Lister les bases"},{"location":"crud.html#selectionner-ou-creer-une-bd","text":"C'est la base qui sera active et repr\u00e9sente par le pr\u00e9fixe db . Toutes les op\u00e9rations ex\u00e9cut\u00e9es ensuite sont ex\u00e9cut\u00e9es sur cette base. use > use nom_base Example Cr\u00e9er une base bibliotheque > use bibliotheque","title":"S\u00e9lectionner ou cr\u00e9er une BD"},{"location":"crud.html#supprimer-la-base-de-donnees-en-cours","text":"dropDatabse > db . dropDatabse (); Afficher la liste des op\u00e9rations sur une BD > db . help ();","title":"Supprimer la base de donn\u00e9es en cours"},{"location":"crud.html#les-collections-de-la-base-en-cours","text":"Cr\u00e9ation de collection > db . createCollection ( \"nom\" ) Exemple Cr\u00e9er une collection livres > db . createCollection ( \"livres\" ); Lister les collections > show collections Supprimer une collection > db . nom_collection . drop ();","title":"Les collections de la base en cours"},{"location":"crud.html#insertion-de-documents","text":"Un document est ins\u00e9r\u00e9 dans une collection. Il est possible d'utiliser les m\u00e9thodes insert() , insertOne() ou insertMany() . Exemple > db . livres . insert ({ \"Titre\" : \"Mongodb: the definitive guide, 2nd edition\" , \"Cat\u00e9gorie\" : \"Informatique\" , \"Pages\" : 434 , \"Ann\u00e9e\" : 2013 , \"Prix\" : 42.73 , \"R\u00e9sum\u00e9\" : \"This updated second edition provides guidance for database developers, advanced configuration for system administrators, and an overview of the concepts and use cases for other people on your project.\" , \"Langue\" : \"EN\" , \"ISBN\" : 9781449344689 , \"Editeur\" : { \"Nom\" : \"\" , \"Pays\" : \"\" }, \"Auteurs\" : [{ \"Nom\" : \"Chodorow\" , \"Pr\u00e9nom\" : \"Kristina\" }], \"Mots cl\u00e9s\" : [ \"MongoDB\" , \"NoSQL\" , \"Database\" ] }); Exercice Ajouter le livre ayant cette couverture : Note MongoDB associe un identifiant unique \u00e0 chaque document appel\u00e9 _id , et lui attribue une valeur si elle n\u2019est pas indiqu\u00e9e explicitement. MongoDB ne fait aucun contr\u00f4le de structure ou autres contraintes sur les donn\u00e9es. Ces contr\u00f4les seront r\u00e9alis\u00e9es.","title":"Insertion de documents"},{"location":"crud.html#importation-de-donnees","text":"Pour alimenter la base avec des donn\u00e9es existantes dans un format support\u00e9 (JSON, CSV, TSV), utiliser Compass. T\u00e9l\u00e9charger restaurants.json et d\u00e9compresser son contenu. Cr\u00e9er une base de donn\u00e9es \"emplacements\". Cr\u00e9er une collection \"restaurants\". S\u00e9lectionner la collection \"restaurants\" et cliquer sur le bouton \"Add data\" puis Import file . S\u00e9lectionner le fichier restaurants.json et importer.","title":"Importation de donn\u00e9es"},{"location":"crud.html#interrogation","text":"C'est la m\u00e9thode find() qui r\u00e9alise l'interrogation dans MongoDB. Les requ\u00eates seront effectu\u00e9es sur la base de donn\u00e9es des restaurants import\u00e9e pr\u00e9c\u00e9demment : use emplacements","title":"Interrogation"},{"location":"crud.html#format-de-la-methpde-find","text":"find poss\u00e8de 2 param\u00e8tres optionnels repr\u00e9sent\u00e9s \u00e9galement en format JSON. Le premier repr\u00e9sente la requ\u00eate de filtrage (clause WHERE en SQL). Le second param\u00e8tre exprime l'op\u00e9ration la projection. find > db . collection . find ( query , projection );","title":"Format de la m\u00e9thpde find()"},{"location":"crud.html#projection","text":"{ cl\u00e9 :< 0 , 1 > } 0 : exclusion, 1 : inclusion L'identifiant _id est implicitement inclus dans le r\u00e9sultat. Pour l'exclure, ajouter _id:0 . Il n'est pas possible de m\u00e9langer inclusions et exclusions sauf pour le champ _id. Pour acc\u00e9der \u00e0 un champ d'un document imbriqu\u00e9, utiliser . : champ1.champ2 . Exemples Afficher les noms des restaurants et leurs sp\u00e9cialit\u00e9s (cuisine). MongoDB SQL > db . restaurants . find ({},{ name : 1 , cuisine : 1 }); SELECT name , cuisine FROM restaurants Afficher tous les noms des restaurants et la rue (street) et pas le _id. MongoDB SQL > db . restaurants . find ({},{ name : 1 , \"address.street\" : 1 , _id : 0 }); SELECT name , street FROM restaurants","title":"Projection"},{"location":"crud.html#contenu-de-collection","text":"find() affiche le contenu de la collection tandis que count() retourne le nombre de documents de la collection. Exemple MongoDB SQL > db . restaurants . find () > db . restaurants . count () SELECT * FROM restaurants SELECT count ( * ) FROM restaurants","title":"Contenu de collection"},{"location":"crud.html#selection","text":"Par valeur exacte La condition d'\u00e9galit\u00e9 est exprim\u00e9e par champ : valeur . Exemples Trouver les restaurants du quartier Brooklyn. MongoDB SQL > db . restaurants . find ( { \"borough\" : \"Brooklyn\" } ); SELECT * FROM restaurants WHERE borough = 'Brooklyn' Trouver les restaurants du quartier Brooklyn offrant la cuisine italienne. MongoDB SQL > db . restaurants . find ( { \"borough\" : \"Brooklyn\" , \"cuisine\" : \"Italian\" } ) SQL SELECT * FROM restaurants WHERE borough = 'Brooklyn' and cuisine = 'Italian' Trouver les restaurants sans nom ( null ). MongoDB SQL > db . restaurants . find ( { \"name\" : null } ); SELECT * FROM restaurants WHERE name IS NULL Expressions r\u00e9guli\u00e8res Avec les champs de type texte, MongoDB accepte les expressions r\u00e9guli\u00e8res sous le format \"champ\" : /regex/options . Option Description i insensible \u00e0 la casse. m Multiligne. Exemples Trouver les restaurants dont le nom contient Pizza sans prendre en compte la casse. MongoDB SQL > db . restaurants . find ( { \"name\" : /pizza/i }); SELECT * FROM restaurants WHERE upper ( name ) like '%PIZZA%' Trouver les restaurants dont le nom commence par 'A'. MongoDB SQL > db . restaurants . find ( { \"name\" : /^A/ }); SELECT * FROM restaurants WHERE name like 'A%' Trouver les restaurants dont le nom est compos\u00e9 de 7 caract\u00e8res. MongoDB SQL > db . restaurants . find ( { \"name\" : /^.{7}$/ }); SELECT * FROM restaurants WHERE name like '_______'","title":"S\u00e9lection"},{"location":"crud.html#filtrage-avec-operateurs","text":"Pour construire les crit\u00e8res de s\u00e9lection, plusieurs op\u00e9rateurs peuvent \u00eatre utilis\u00e9s dans la requ\u00eate selon le format : { champ1 : { < op\u00e9rateur >:< valeur1 > , ...} Les op\u00e9rateurs Op\u00e9rateur R\u00f4le Exemple $gt, $gte >,>= \"champ\" : { \"$gt\" : 10 } $lt, $lte <,<= \"champ\" : { \"$lt\" : 10 } $ne != \"champ\" : { \"$ne\" : 10 } $in, $nin IN, NOT IN \"champ\" : { \"$in\" : [ 10 , 20 , 30 ]} $or ou logique \"$or\" : [{ \"champ\" : { \"$gt\" : 10 }},{ \"champ\" : { \"$lt\" : 5 }}] $and et logique \"$and\" : [{ \"champ\" : { \"$gt\" : 10 }},{ \"champ\" : { \"$lt\" : 5 }}] $not n\u00e9gation \"champ\" : { \"$not\" : { \"$gt\" : 10 }} $exists Existence de la cl\u00e9 dans le document \"champ\" : { \"$exists\" : 1 } $size taille d'une champ array \"champTableau\" : { \"$size\" : 5 } $elemMatch v\u00e9rification conjointe de plusieurs conditions sur un \u00e9l\u00e9ment du tableau \"champTableau\" : { $elemMatch : { \"champInterne\" : { $gt : 5 }}} Exemples Exemple 1 Trouver les noms et scores des restaurants de Manhattan ayant re\u00e7u au moins un score inf\u00e9rieur \u00e0 10. MongoDB > db . restaurants . find ( { borough : \"Manhattan\" , \"grades.score\" : { \"$lt\" : 10 } }, { name : 1 , \"grades.score\" : 1 , _id : 0 }); Exemple 2 Trouver les noms et scores des restaurants de Manhattan avec des scores tous inf\u00e9rieur \u00e0 10. MongoDB > db . restaurants . find ( { borough : \"Manhattan\" , \"grades.score\" : { $not : { \"$gte\" : 10 }} }, { name : 1 , \"grades.score\" : 1 , _id : 0 }); Exemple 3 Trouver les restaurants qui ont une \u00e9valuation ayant un grade \u2018C\u2019 avec un score inf\u00e9rieur \u00e0 40. MongoDB > db . restaurants . find ({ \"grades\" : { $elemMatch : { \"grade\" : \"C\" , \"score\" : { $lt : 40 } } } }, { \"grades.grade\" : 1 , \"grades.score\" : 1 , _id : 0 }); $elemMatch permet de v\u00e9rifier les conditions sur le m\u00eame \u00e9l\u00e9ment du tableau. Sans cet op\u00e9rateur on obtient des \u00e9valuations avec des scores diff\u00e9rents de 30 ou des grades diff\u00e9rents de C. V\u00e9rifier les r\u00e9sultats de la requ\u00eate sans elemMatch : > db . restaurants . find ({ \"grades.grade\" : \"C\" , \"grades.score\" : { $lt : 30 } }, { \"grades.grade\" : 1 , \"grades.score\" : 1 }); Exemple 4 Trouver les restaurants qui ont une exactement 4 \u00e9valuations. MongoDB > db . restaurants . find ({ \"grades\" : { $size : 4 } }); Exemple 5 Trouver les restaurants qui ont une longitude (la premi\u00e8re valeur de coordinates) < -100. MongoDB > db . restaurants . find ({ \"address.coord.coordinates.0\" : { $lt :- 100 } }); Distinct Pour d\u00e9terminer les valeurs distinctes d'un champ. Exemples Trouver les diff\u00e9rents quartiers. MongoDB SQL > db . restaurants . distinct ( \"borough\" ); SELECT distinct borough FROM restaurants Trouver l'intervalle des scores. MongoDB > db . restaurants . distinct ( \"grades.score\" );","title":"Filtrage avec op\u00e9rateurs"},{"location":"crud.html#mise-a-jour","text":"Update > db . collection . update ( { filtre }, { < op\u00e9rateurUpdate >: { < champ1 >:< valeur1 > ,....}, < op\u00e9rateurUpdate >: { < champ1 >:< valeur1 > ,....}, .... }, { \"multi\" : true | false , //mise \u00e0 jour de plusieurs documents - par d\u00e9faut false \"upsert\" : true | false //insertion si aucun document ne correspond - par d\u00e9faut false } ); Op\u00e9rateurs de mise \u00e0 jour Op\u00e9rateur Description Exemple $currentDate Affecter \u00e0 un champ la date en cours $currentDate : { \"champ\" : true } $inc, $mul Incr\u00e9menter resp. multiplier la valeur d'un champ par une valeur $inc : { \"champ\" : 5 } $min, $max Modifie le champ si la nouvelle valeur est inf\u00e9rieure resp. sup\u00e9rieure \u00e0 la valeur actuelle. $min : { \"champ\" : 10 } $rename Renommer un champ. $rename : { \"champ\" : \"nouveauChamp\" } $set Affecte une valeur au champ sp\u00e9cifi\u00e9 et l'ajoute s'il n'existe pas. $set : { \"champ\" : 2 } $unset Supprime le champ du document. $unset : { \"champ\" : \"\" } $pop Supprime le premier ou dernier \u00e9l\u00e9ment d'un champ tableau. $pop : { \"champTableau\" :- 1 } -1: premier, 1:dernier $pull Supprime les \u00e9l\u00e9ments qui v\u00e9rifient la condition. $pull : { \"champTableau\" : condition } $push Ajoute un ou plusieurs \u00e9l\u00e9ments au tableau \u00e0 une position. $push : { \"champTableau\" : { $each : [ valeur1 , valeur2 ,...], $position : positionInsertion }} Exemples Exemple 1 Modifier le champ borough en 'Manhattan' et affecter la date actuelle au champ lastupdate du restaurant appel\u00e9 \"The Movable Feast\". MongoDB SQL > db . restaurants . update ( { \"name\" : \"The Movable Feast\" }, { $set : { \"borough\" : \"Manhattan\" }, $currentDate : { \"lastUpdated\" : true } } ); UPDATE restaurants SET borough = 'Manhattan' , lastUpdated = sysdate , WHERE name = 'The Movable Feast' Exemple 2 Supprimer le champ cuisine et ajouter 2 point au premier score du restaurant \"The Movable Feast\" MongoDB > db . restaurants . update ( { \"name\" : \"The Movable Feast\" }, { $unset : { \"cuisine\" : \"\" }, $inc : { \"grades.0.score\" : 2 }, } ); Exemple 3 Ajouter un commentaire avec la valeur acceptable pour les restaurants qui n'ont pas eu le grade 'C'. MongoDB > db . restaurants . update ( { \"grades.grade\" : { $not : { $eq : \"C\" }}}, { $set : { \"comment\" : \"acceptable\" }}, { \"multi\" : true } ); Exercice Donner la commande qui permet d'annuler celle de l'exemple 2.","title":"Mise \u00e0 jour"},{"location":"crud.html#suppression","text":"Remove > db . collection . remove ( { filtre }, { justOne : true | false } //Optionnel par d\u00e9faut false ); Exemple Supprimer tous les restaurants dont le nom commence par M. MongoDB SQL > db . restaurants . remove ({ name : /^M.*/ }); DELETE FROM restaurants WHERE name like 'M%' ;","title":"Suppression"},{"location":"exercice.html","text":"Exercices \u00b6 Exercice 1 \u00b6 R\u00e9pondre aux questions suivantes : Quels restaurants contiennent des chiffres dans leurs noms ? Quels sont les noms et identifiants (restaurant_id) des restaurants qui n'ont pas re\u00e7u de score > 6? Chercher pour chaque restaurant son score minimal et maximal tri\u00e9s par le score minimal croissant puis le score maximal d\u00e9croissant. Comment enregistrer la r\u00e9ponse de la question 2 dans une collection appel\u00e9e \"q2\". Ajouter l'adresse \u00e0 chaque restaurant de cette collection. Exercice 2 \u00b6 Cr\u00e9er une bases de donn\u00e9es portant le nom \"meteo\". Importer, avec Compass, le fichier weather_tunisie.json dans une collection appel\u00e9e \u00abtunisie\u00bb. (Cliquer sur le lien pour t\u00e9l\u00e9charger le fichier). La structure des documents est la suivante : { \"_id\" : { \"$oid\" : \"61b665de7e8b7517e3d478bd\" }, \"lat\" : 33.5444 , //latitude \"lon\" : 9.9716 , //longitude \"daily\" : [ //les pr\u00e9visions de 8 jours \u00e0 partir d\u2019aujourd\u2019hui, chacune contient les informations suivantes : { \"dt\" : { \"$date\" : \"2021-12-12T12:00:00.000Z\" }, //date de la pr\u00e9vision \"sunrise\" : { \"$date\" : \"2021-12-12T07:15:08.000Z\" }, //lever de soleil \"sunset\" : { \"$date\" : \"2021-12-12T17:12:48.000Z\" }, //coucher de soleil \"moonrise\" : { \"$date\" : \"2021-12-12T13:33:00.000Z\" }, //lever de lune \"moonset\" : { \"$date\" : \"2021-12-12T00:57:00.000Z\" }, //coucher de lune \"moon_phase\" : 0.29 , //phase de la lune \"temp\" : { //temp\u00e9rature \"day\" : 10.81 , // du jour \"min\" : 6.19 , // minimale \"max\" : 12.11 , // maximale \"night\" : 10.43 , // pendant la nuit \"eve\" : 9.85 , // au soir \"morn\" : 6.56 // au matin }, \"feels_like\" : { // temp\u00e9rature sentie \"day\" : 9.15 , // du jour \"night\" : 8.94 , // pendant la nuit \"eve\" : 9.43 , // le soir \"morn\" : 3.67 // le matin }, \"pressure\" : 1023 , // pression atmosph\u00e9rique \"humidity\" : 46 , //humidit\u00e9 en pourcentage \"wind_speed\" : 7.89 , //vitesse du vent \"wind_deg\" : 324 , //orientation du vent en degr\u00e9 \"weather\" : [ // le climat { \"id\" : 802 , \"main\" : \"Clouds\" , \"description\" : \"partiellement nuageux\" , \"icon\" : \"03d\" }], \"clouds\" : 34 // nuages }, \u2026 // suite des pr\u00e9visions des jours suivants ], \"name\" : \"Matmata\" // nom de la ville } Requ\u00eates \u00e0 r\u00e9aliser : Afficher le nom des villes dont le nom contient \"bir\" ou \"Bir\". Ajouter un champ appel\u00e9 zone qui aura l\u2019une des valeurs suivantes selon sa latitude : sud si latitude <34 centre si latitude entre 34 et 36 nord si latitude >36 Afficher le nom des villes contenant les lettre t, b, r. Afficher le nom des villes qui poss\u00e8dent au moins une pr\u00e9vision avec une vitesse du vent sup\u00e9rieure \u00e0 15. Afficher les noms des villes et leurs niveaux d\u2019humidit\u00e9 qui ont toutes les pr\u00e9visions d\u2019humidit\u00e9 inf\u00e9rieures \u00e0 47. Calculer la temp\u00e9rature (temp.day) moyenne, et la vitesse du vent moyenne de la ville de Bizerte. Quel est le jour le plus chaud (temp.day) et dans quelle ville. Afficher les temp\u00e9ratures minimale et maximale, la vitesse du vent et la description du climat pour la ville de Bizerte au 15/12/2021. Travail Optionnel \u00b6 Choisir l'un des th\u00e8mes et cr\u00e9er des exemples de requ\u00eates sur la base restaurants ou une autre de base de ton choix. Indexation Objet cursor Requ\u00eates g\u00e9ospatiales Jointures avec $lookup et des conditions multiples.","title":"Exercices"},{"location":"exercice.html#exercices","text":"","title":"Exercices"},{"location":"exercice.html#exercice-1","text":"R\u00e9pondre aux questions suivantes : Quels restaurants contiennent des chiffres dans leurs noms ? Quels sont les noms et identifiants (restaurant_id) des restaurants qui n'ont pas re\u00e7u de score > 6? Chercher pour chaque restaurant son score minimal et maximal tri\u00e9s par le score minimal croissant puis le score maximal d\u00e9croissant. Comment enregistrer la r\u00e9ponse de la question 2 dans une collection appel\u00e9e \"q2\". Ajouter l'adresse \u00e0 chaque restaurant de cette collection.","title":"Exercice 1"},{"location":"exercice.html#exercice-2","text":"Cr\u00e9er une bases de donn\u00e9es portant le nom \"meteo\". Importer, avec Compass, le fichier weather_tunisie.json dans une collection appel\u00e9e \u00abtunisie\u00bb. (Cliquer sur le lien pour t\u00e9l\u00e9charger le fichier). La structure des documents est la suivante : { \"_id\" : { \"$oid\" : \"61b665de7e8b7517e3d478bd\" }, \"lat\" : 33.5444 , //latitude \"lon\" : 9.9716 , //longitude \"daily\" : [ //les pr\u00e9visions de 8 jours \u00e0 partir d\u2019aujourd\u2019hui, chacune contient les informations suivantes : { \"dt\" : { \"$date\" : \"2021-12-12T12:00:00.000Z\" }, //date de la pr\u00e9vision \"sunrise\" : { \"$date\" : \"2021-12-12T07:15:08.000Z\" }, //lever de soleil \"sunset\" : { \"$date\" : \"2021-12-12T17:12:48.000Z\" }, //coucher de soleil \"moonrise\" : { \"$date\" : \"2021-12-12T13:33:00.000Z\" }, //lever de lune \"moonset\" : { \"$date\" : \"2021-12-12T00:57:00.000Z\" }, //coucher de lune \"moon_phase\" : 0.29 , //phase de la lune \"temp\" : { //temp\u00e9rature \"day\" : 10.81 , // du jour \"min\" : 6.19 , // minimale \"max\" : 12.11 , // maximale \"night\" : 10.43 , // pendant la nuit \"eve\" : 9.85 , // au soir \"morn\" : 6.56 // au matin }, \"feels_like\" : { // temp\u00e9rature sentie \"day\" : 9.15 , // du jour \"night\" : 8.94 , // pendant la nuit \"eve\" : 9.43 , // le soir \"morn\" : 3.67 // le matin }, \"pressure\" : 1023 , // pression atmosph\u00e9rique \"humidity\" : 46 , //humidit\u00e9 en pourcentage \"wind_speed\" : 7.89 , //vitesse du vent \"wind_deg\" : 324 , //orientation du vent en degr\u00e9 \"weather\" : [ // le climat { \"id\" : 802 , \"main\" : \"Clouds\" , \"description\" : \"partiellement nuageux\" , \"icon\" : \"03d\" }], \"clouds\" : 34 // nuages }, \u2026 // suite des pr\u00e9visions des jours suivants ], \"name\" : \"Matmata\" // nom de la ville } Requ\u00eates \u00e0 r\u00e9aliser : Afficher le nom des villes dont le nom contient \"bir\" ou \"Bir\". Ajouter un champ appel\u00e9 zone qui aura l\u2019une des valeurs suivantes selon sa latitude : sud si latitude <34 centre si latitude entre 34 et 36 nord si latitude >36 Afficher le nom des villes contenant les lettre t, b, r. Afficher le nom des villes qui poss\u00e8dent au moins une pr\u00e9vision avec une vitesse du vent sup\u00e9rieure \u00e0 15. Afficher les noms des villes et leurs niveaux d\u2019humidit\u00e9 qui ont toutes les pr\u00e9visions d\u2019humidit\u00e9 inf\u00e9rieures \u00e0 47. Calculer la temp\u00e9rature (temp.day) moyenne, et la vitesse du vent moyenne de la ville de Bizerte. Quel est le jour le plus chaud (temp.day) et dans quelle ville. Afficher les temp\u00e9ratures minimale et maximale, la vitesse du vent et la description du climat pour la ville de Bizerte au 15/12/2021.","title":"Exercice 2"},{"location":"exercice.html#travail-optionnel","text":"Choisir l'un des th\u00e8mes et cr\u00e9er des exemples de requ\u00eates sur la base restaurants ou une autre de base de ton choix. Indexation Objet cursor Requ\u00eates g\u00e9ospatiales Jointures avec $lookup et des conditions multiples.","title":"Travail Optionnel"},{"location":"installation.html","text":"Installation de MongoDB \u00b6 Proc\u00e9dure d'installation sous Windows \u00b6 Lancer l'installation du package MSI . Choisir l'installation en tant que service. Il est possible d'installer aussi MongoDB Compass. Configuration \u00b6 MongoDB est install\u00e9 dans le dossier C: \\P rogram Files \\M ongoDB \\S erver \\4 .0 \\ contenant trois dossiers : bin : Contenant Les fichiers binaires : comme mongod (serveur), mongos (Shard server) et mongo (Shell mongoDB par d\u00e9faut). Des utilitaires comme celui d'importation de donn\u00e9es ( mongoimport ) ou de monitoring ( mongotop ). Fichier de configuration mongod.cfg data : L'espace de stockage. logs : Emplacement du journal. La configuration par d\u00e9faut est : mongod.cfg # Where and how to store data. storage: dbPath: C: \\P rogram Files \\M ongoDB \\S erver \\4 .0 \\d ata journal: enabled: true # where to write logging data. systemLog: destination: file logAppend: true path: C: \\P rogram Files \\M ongoDB \\S erver \\4 .0 \\l og \\m ongod.log # network interfaces net: port: 27017 bindIp: 127 .0.0.1 V\u00e9rification de l'installation \u00b6 Le serveur peut \u00eatre contr\u00f4l\u00e9 par la console Microsoft de gestion des services Windows ( services.msc ). Pour v\u00e9rifier l'installation taper la commade : mongo -version . Le r\u00e9sultat sera : Astuce Pour simplifier l'acc\u00e8s auxx diff\u00e9rents binaires MongoDB, ajouter dans la variable PATH le chemin au dossier d'installation C: \\P rogram Files \\M ongoDB \\S erver \\4 .0 \\b in . Connexion \u00e0 MongoDB \u00b6 Avec le shell par d\u00e9faut \u00b6 mongo > Avec MongoDB Shell mongosh \u00b6 C'est une version am\u00e9lior\u00e9e du Shell par d\u00e9faut : Il permet d'ajouter au shell : La coloration syntaxique La compl\u00e9tion automatique Des messages d'erreur plus d\u00e9taill\u00e9s Note MongoDB Shell est l'outil recommand\u00e9 pour ce TP. Il est bas\u00e9 sur javascript. Avec MongoDB Compass \u00b6 Sp\u00e9cifier la cha\u00eene de connexion ( mongodb://localhost:27017 ) et cliquer sur . Si la configuration standard n'est pas modifi\u00e9e, vous pouvez laisser la cha\u00eene de connexion vide. S\u00e9lectionner la base local et puis la collection startup_log qui contient les informations de connexions. MongoDB avec Docker \u00b6 T\u00e9l\u00e9charger l'image officielle de MongoDB (ici la version 6.0.1) docker pull mongo:6.0.1 Pour v\u00e9rifier que l'image est bien t\u00e9l\u00e9charg\u00e9e et inspecter sa taille : docker images | grep mongo Ex\u00e9cuter un container docker run -d -p 27017 :27017 --name mongodb mongo:6.0.1 Pour v\u00e9rifier que le container est en cours d'ex\u00e9cution : docker ps Se connecter \u00e0 MongoDB Avec le shell docker exec -it mongodb mongos Avec Compass Sp\u00e9cifier la cha\u00eene de connexion ( mongodb://localhost:27017 ) et cliquer sur .","title":"Installation et configuration"},{"location":"installation.html#installation-de-mongodb","text":"","title":"Installation de MongoDB"},{"location":"installation.html#procedure-dinstallation-sous-windows","text":"Lancer l'installation du package MSI . Choisir l'installation en tant que service. Il est possible d'installer aussi MongoDB Compass.","title":"Proc\u00e9dure d'installation sous Windows"},{"location":"installation.html#configuration","text":"MongoDB est install\u00e9 dans le dossier C: \\P rogram Files \\M ongoDB \\S erver \\4 .0 \\ contenant trois dossiers : bin : Contenant Les fichiers binaires : comme mongod (serveur), mongos (Shard server) et mongo (Shell mongoDB par d\u00e9faut). Des utilitaires comme celui d'importation de donn\u00e9es ( mongoimport ) ou de monitoring ( mongotop ). Fichier de configuration mongod.cfg data : L'espace de stockage. logs : Emplacement du journal. La configuration par d\u00e9faut est : mongod.cfg # Where and how to store data. storage: dbPath: C: \\P rogram Files \\M ongoDB \\S erver \\4 .0 \\d ata journal: enabled: true # where to write logging data. systemLog: destination: file logAppend: true path: C: \\P rogram Files \\M ongoDB \\S erver \\4 .0 \\l og \\m ongod.log # network interfaces net: port: 27017 bindIp: 127 .0.0.1","title":"Configuration"},{"location":"installation.html#verification-de-linstallation","text":"Le serveur peut \u00eatre contr\u00f4l\u00e9 par la console Microsoft de gestion des services Windows ( services.msc ). Pour v\u00e9rifier l'installation taper la commade : mongo -version . Le r\u00e9sultat sera : Astuce Pour simplifier l'acc\u00e8s auxx diff\u00e9rents binaires MongoDB, ajouter dans la variable PATH le chemin au dossier d'installation C: \\P rogram Files \\M ongoDB \\S erver \\4 .0 \\b in .","title":"V\u00e9rification de l'installation"},{"location":"installation.html#connexion-a-mongodb","text":"","title":"Connexion \u00e0 MongoDB"},{"location":"installation.html#avec-le-shell-par-defaut","text":"mongo >","title":"Avec le shell par d\u00e9faut"},{"location":"installation.html#avec-mongodb-shell-mongosh","text":"C'est une version am\u00e9lior\u00e9e du Shell par d\u00e9faut : Il permet d'ajouter au shell : La coloration syntaxique La compl\u00e9tion automatique Des messages d'erreur plus d\u00e9taill\u00e9s Note MongoDB Shell est l'outil recommand\u00e9 pour ce TP. Il est bas\u00e9 sur javascript.","title":"Avec MongoDB Shell mongosh"},{"location":"installation.html#avec-mongodb-compass","text":"Sp\u00e9cifier la cha\u00eene de connexion ( mongodb://localhost:27017 ) et cliquer sur . Si la configuration standard n'est pas modifi\u00e9e, vous pouvez laisser la cha\u00eene de connexion vide. S\u00e9lectionner la base local et puis la collection startup_log qui contient les informations de connexions.","title":"Avec MongoDB Compass"},{"location":"installation.html#mongodb-avec-docker","text":"T\u00e9l\u00e9charger l'image officielle de MongoDB (ici la version 6.0.1) docker pull mongo:6.0.1 Pour v\u00e9rifier que l'image est bien t\u00e9l\u00e9charg\u00e9e et inspecter sa taille : docker images | grep mongo Ex\u00e9cuter un container docker run -d -p 27017 :27017 --name mongodb mongo:6.0.1 Pour v\u00e9rifier que le container est en cours d'ex\u00e9cution : docker ps Se connecter \u00e0 MongoDB Avec le shell docker exec -it mongodb mongos Avec Compass Sp\u00e9cifier la cha\u00eene de connexion ( mongodb://localhost:27017 ) et cliquer sur .","title":"MongoDB avec Docker "},{"location":"pymongo.html","text":"MongoDB avec PyMongo \u00b6 Installation du package \u00b6 Utiliser pip pour installer pymongo pip install pymongo V\u00e9rifier l'installation from pymongo import MongoClient Si aucune erreur n'est apparue, alors l'installation est r\u00e9ussie. Exemple \u00b6 Dataset Pour que les exemples s'ex\u00e9cutent correctement, le fichier json flights-20k.json doit \u00eatre import\u00e9 dans la base de donn\u00e9es flightstats et la collection flights . Le code des exemples qui suivent est disponible en format Notebook Jupyter : Pymongo.ipynb Se connecter au serveur MongoDB \u00b6 from pymongo import MongoClient client = MongoClient ( \"localhost\" , 27017 ) Afficher les BD disponibles \u00b6 client . list_database_names () S\u00e9lectionner une bases de donn\u00e9es \u00b6 db = client [ 'flightstats' ] # le choix du bd permet de retrouver la m\u00eame syntaxe que le shell de MongoDB Afficher les collections \u00b6 db . list_collection_names () ['flights'] Nombre de document d'une collection \u00b6 db . flights . count_documents ({}) 20000 Afficher un document \u00b6 from pprint import pprint pprint ( db . flights . find_one ()) {'_id': ObjectId('634727c85afd6caa6fed4c9e'), 'date': '2001/01/13 14:56', 'delay': 32, 'destination': 'SJC', 'distance': 417, 'origin': 'SAN'} Insertion \u00b6 myflight = { 'date' : '2022/10/10 10:15' , 'delay' : 12 , 'destination' : 'SJC' , 'distance' : 417 , 'origin' : 'SAN' } new_id = db . flights . insert_one ( myflight ) . inserted_id print ( new_id ) 634742d03646634ba81c9855 Recherche par _id \u00b6 # Remplacer la valeur _id par la sortie de la cellule pr\u00e9c\u00e9dente db . flights . count_documents ({ \"_id\" : \"634742d03646634ba81c9855\" }) 0 db . flights . count_documents ({ \"_id\" : new_id }) 1 from bson.objectid import ObjectId # Remplacer la valeur _id par la sortie de la cellule d'insertion de document db . flights . count_documents ({ \"_id\" : ObjectId ( \"634742d03646634ba81c9855\" )}) 1 Supprimer \u00b6 res = db . flights . delete_one ({ \"_id\" : new_id }) # Nombre de documents supprim\u00e9s res . deleted_count 1 Recherche \u00b6 # Les vols ayant un retard compris entre 60 et 61 minutes tri\u00e9 par le retard res = db . flights . find ({ \"$and\" :[{ \"delay\" :{ \"$gte\" : 60 }},{ \"delay\" :{ \"$lte\" : 61 }}]}) . sort ( \"delay\" ) for fl in res : print ( f \" { fl [ 'origin' ] } - { fl [ 'destination' ] } : { fl [ 'delay' ] } \" ) SJC-LAS: 60 SJC-MCI: 60 FLL-JAX: 60 ONT-PHX: 60 SFO-SAN: 60 OAK-LAX: 60 MDW-STL: 60 LAS-ONT: 60 OKC-MCI: 60 DAL-AMA: 60 SAN-TUS: 60 PHX-BHM: 60 PHX-ABQ: 60 BWI-CLE: 60 MHT-BWI: 60 BUR-OAK: 60 BNA-MDW: 60 LAS-SLC: 60 BWI-BNA: 60 SJC-BUR: 60 ISP-TPA: 60 PDX-BOI: 60 LAX-PHX: 60 OAK-SEA: 60 ABQ-PHX: 60 RNO-OAK: 60 SLC-PHX: 60 SAN-ELP: 60 OAK-LAX: 60 SFO-PHX: 60 SMF-BUR: 60 MDW-BHM: 60 OAK-LAX: 60 SAN-PHX: 60 MCI-PHX: 60 ABQ-PHX: 60 IAH-DAL: 60 PHX-ONT: 60 HOU-CRP: 60 SJC-LAX: 60 HOU-SAT: 60 STL-HOU: 60 MCI-BWI: 60 RNO-OAK: 60 SNA-SJC: 60 SLC-OAK: 60 DAL-AMA: 60 SFO-PHX: 60 ONT-PHX: 61 ELP-AUS: 61 HOU-MSY: 61 BWI-MCO: 61 MCI-MDW: 61 Agr\u00e9gation et visualisation du r\u00e9sultat \u00b6 import seaborn as sns import matplotlib.pyplot as plt import pandas as pd #Calculer le retard par a\u00e9oroport de d\u00e9part et afficher 5 premiers pipeline = [ { \"$group\" : { \"_id\" : \"$origin\" , \"moyenne\" : { \"$avg\" : \"$delay\" }}}, { \"$sort\" : { \"moyenne\" : - 1 }}, { \"$limit\" : 5 }] res = db . flights . aggregate ( pipeline ) df = pd . DataFrame ( list ( res )) df . rename ({ \"_id\" : \"A\u00e9roport\" }, axis = 1 , inplace = True ) sns . barplot ( data = df , y = \"moyenne\" , x = \"A\u00e9roport\" ) plt . show () Exercice \u00b6 Ecrire un programme Python qui permet de charger le contenu du fichier CSV airports.csv dans MongoDB selon 2 mod\u00e9lisations : normalis\u00e9e et d\u00e9normalis\u00e9e. V\u00e9rifier le temps d'ex\u00e9cution de la requ\u00eate permettant d'afficher la ville de chaque a\u00e9roport dans chacune des mod\u00e9lisation. Documentation Pymongo \u00b6 Documentation PyMongo","title":"MongoDB avec Pymongo"},{"location":"pymongo.html#mongodb-avec-pymongo","text":"","title":"MongoDB avec PyMongo"},{"location":"pymongo.html#installation-du-package","text":"Utiliser pip pour installer pymongo pip install pymongo V\u00e9rifier l'installation from pymongo import MongoClient Si aucune erreur n'est apparue, alors l'installation est r\u00e9ussie.","title":"Installation du package"},{"location":"pymongo.html#exemple","text":"Dataset Pour que les exemples s'ex\u00e9cutent correctement, le fichier json flights-20k.json doit \u00eatre import\u00e9 dans la base de donn\u00e9es flightstats et la collection flights . Le code des exemples qui suivent est disponible en format Notebook Jupyter : Pymongo.ipynb","title":"Exemple"},{"location":"pymongo.html#se-connecter-au-serveur-mongodb","text":"from pymongo import MongoClient client = MongoClient ( \"localhost\" , 27017 )","title":"Se connecter au serveur MongoDB"},{"location":"pymongo.html#afficher-les-bd-disponibles","text":"client . list_database_names ()","title":"Afficher les BD disponibles"},{"location":"pymongo.html#selectionner-une-bases-de-donnees","text":"db = client [ 'flightstats' ] # le choix du bd permet de retrouver la m\u00eame syntaxe que le shell de MongoDB","title":"S\u00e9lectionner une bases de donn\u00e9es"},{"location":"pymongo.html#afficher-les-collections","text":"db . list_collection_names () ['flights']","title":"Afficher les collections"},{"location":"pymongo.html#nombre-de-document-dune-collection","text":"db . flights . count_documents ({}) 20000","title":"Nombre de document d'une collection"},{"location":"pymongo.html#afficher-un-document","text":"from pprint import pprint pprint ( db . flights . find_one ()) {'_id': ObjectId('634727c85afd6caa6fed4c9e'), 'date': '2001/01/13 14:56', 'delay': 32, 'destination': 'SJC', 'distance': 417, 'origin': 'SAN'}","title":"Afficher un document"},{"location":"pymongo.html#insertion","text":"myflight = { 'date' : '2022/10/10 10:15' , 'delay' : 12 , 'destination' : 'SJC' , 'distance' : 417 , 'origin' : 'SAN' } new_id = db . flights . insert_one ( myflight ) . inserted_id print ( new_id ) 634742d03646634ba81c9855","title":"Insertion"},{"location":"pymongo.html#recherche-par-_id","text":"# Remplacer la valeur _id par la sortie de la cellule pr\u00e9c\u00e9dente db . flights . count_documents ({ \"_id\" : \"634742d03646634ba81c9855\" }) 0 db . flights . count_documents ({ \"_id\" : new_id }) 1 from bson.objectid import ObjectId # Remplacer la valeur _id par la sortie de la cellule d'insertion de document db . flights . count_documents ({ \"_id\" : ObjectId ( \"634742d03646634ba81c9855\" )}) 1","title":"Recherche par _id"},{"location":"pymongo.html#supprimer","text":"res = db . flights . delete_one ({ \"_id\" : new_id }) # Nombre de documents supprim\u00e9s res . deleted_count 1","title":"Supprimer"},{"location":"pymongo.html#recherche","text":"# Les vols ayant un retard compris entre 60 et 61 minutes tri\u00e9 par le retard res = db . flights . find ({ \"$and\" :[{ \"delay\" :{ \"$gte\" : 60 }},{ \"delay\" :{ \"$lte\" : 61 }}]}) . sort ( \"delay\" ) for fl in res : print ( f \" { fl [ 'origin' ] } - { fl [ 'destination' ] } : { fl [ 'delay' ] } \" ) SJC-LAS: 60 SJC-MCI: 60 FLL-JAX: 60 ONT-PHX: 60 SFO-SAN: 60 OAK-LAX: 60 MDW-STL: 60 LAS-ONT: 60 OKC-MCI: 60 DAL-AMA: 60 SAN-TUS: 60 PHX-BHM: 60 PHX-ABQ: 60 BWI-CLE: 60 MHT-BWI: 60 BUR-OAK: 60 BNA-MDW: 60 LAS-SLC: 60 BWI-BNA: 60 SJC-BUR: 60 ISP-TPA: 60 PDX-BOI: 60 LAX-PHX: 60 OAK-SEA: 60 ABQ-PHX: 60 RNO-OAK: 60 SLC-PHX: 60 SAN-ELP: 60 OAK-LAX: 60 SFO-PHX: 60 SMF-BUR: 60 MDW-BHM: 60 OAK-LAX: 60 SAN-PHX: 60 MCI-PHX: 60 ABQ-PHX: 60 IAH-DAL: 60 PHX-ONT: 60 HOU-CRP: 60 SJC-LAX: 60 HOU-SAT: 60 STL-HOU: 60 MCI-BWI: 60 RNO-OAK: 60 SNA-SJC: 60 SLC-OAK: 60 DAL-AMA: 60 SFO-PHX: 60 ONT-PHX: 61 ELP-AUS: 61 HOU-MSY: 61 BWI-MCO: 61 MCI-MDW: 61","title":"Recherche"},{"location":"pymongo.html#agregation-et-visualisation-du-resultat","text":"import seaborn as sns import matplotlib.pyplot as plt import pandas as pd #Calculer le retard par a\u00e9oroport de d\u00e9part et afficher 5 premiers pipeline = [ { \"$group\" : { \"_id\" : \"$origin\" , \"moyenne\" : { \"$avg\" : \"$delay\" }}}, { \"$sort\" : { \"moyenne\" : - 1 }}, { \"$limit\" : 5 }] res = db . flights . aggregate ( pipeline ) df = pd . DataFrame ( list ( res )) df . rename ({ \"_id\" : \"A\u00e9roport\" }, axis = 1 , inplace = True ) sns . barplot ( data = df , y = \"moyenne\" , x = \"A\u00e9roport\" ) plt . show ()","title":"Agr\u00e9gation et visualisation du r\u00e9sultat"},{"location":"pymongo.html#exercice","text":"Ecrire un programme Python qui permet de charger le contenu du fichier CSV airports.csv dans MongoDB selon 2 mod\u00e9lisations : normalis\u00e9e et d\u00e9normalis\u00e9e. V\u00e9rifier le temps d'ex\u00e9cution de la requ\u00eate permettant d'afficher la ville de chaque a\u00e9roport dans chacune des mod\u00e9lisation.","title":"Exercice"},{"location":"pymongo.html#documentation-pymongo","text":"Documentation PyMongo","title":"Documentation Pymongo"},{"location":"replication.html","text":"R\u00e9plication Dans MongoDB \u00b6 D\u00e9finition \u00b6 La r\u00e9plication est une technique commune aux syst\u00e8mes NoSQL pour assurer la s\u00e9curit\u00e9 et la reprise apr\u00e8s les pannes. Elle consiste \u00e0 cr\u00e9er des copies des donn\u00e9es sur des serveurs diff\u00e9rents pouvant remplacer le serveur en cas de panne. Principe du Replica Set \u00b6 Un Replica Set est un groupe de serveurs mongod qui g\u00e8rent les m\u00eames donn\u00e9es. Il est compos\u00e9 d'un unique serveur primaire (ma\u00eetre) et de plusieurs serveurs secondaires (esclaves). Le serveur primaire r\u00e9pond aux demandes du (lecture/\u00e9criture) client (driver). Le client peut \u00e9galement lire \u00e0 partir des serveurs secondaires. Les serveurs secondaires reproduisent les m\u00eames op\u00e9rations (\u00e9critures) r\u00e9alis\u00e9es au niveau du serveur primaire. Si le serveur primaire est indisponible, un serveur secondaire est promu en primaire apr\u00e8s une proc\u00e9dure d'\u00e9lection. Si le nombre de serveurs est pair, un serveur arbitre est ajout\u00e9. Le nombre minimal de serveurs est de 3 et ils peuvent atteindre 50. 7 serveurs au maximum peuvent participer \u00e0 une \u00e9lection. Mise en place d'un Replica Set avec Docker \u00b6 La cr\u00e9ation d'un cluster de 3 noeuds avec Docker consiste \u00e0 r\u00e9aliser les 3 \u00e9tapes suivantes : Cr\u00e9er un r\u00e9seau Docker pour interconnecter les containers D\u00e9marrer 3 instances de MongoDB Initier le Replica Set Cr\u00e9er un r\u00e9seau docker docker network create mongoCluster D\u00e9marrer les 3 containers MongoDB docker run -d -p 27017 :27017 --name mongo1 --network mongoCluster mongo:6.0.1 mongod --replSet rs1 --bind_ip localhost,mongo1 docker run -d -p 27018 :27017 --name mongo2 --network mongoCluster mongo:6.0.1 mongod --replSet rs1 --bind_ip localhost,mongo2 docker run -d -p 27019 :27017 --name mongo3 --network mongoCluster mongo:6.0.1 mongod --replSet rs1 --bind_ip localhost,mongo3 Initier le Replica Set Se connecter \u00e0 mongo1 avec Compoass (mongodb://localhost:27017) Ex\u00e9cuter depuis le shell > rs . initiate ({ _id : \"rs1\" , members : [ { _id : 0 , host : \"mongo1\" }, { _id : 1 , host : \"mongo2\" }, { _id : 2 , host : \"mongo3\" } ] }) V\u00e9rifier le replica > rs . status () La r\u00e9ponse est similaire \u00e0 ce qui suit : { se t : 'rs 1 ' , da te : 2022-10-12 T 09 : 56 : 20.947 Z , myS tate : 1 , ter m : Lo n g( \"1\" ) , sy n cSourceHos t : '' , sy n cSourceId : -1 , hear t bea t I nter valMillis : Lo n g( \"2000\" ) , majori t yVo te Cou nt : 2 , wri te Majori t yCou nt : 2 , vo t i n gMembersCou nt : 3 , wri ta bleVo t i n gMembersCou nt : 3 , op t imes : { las t Commi tte dOpTime : { ts : Times ta mp( { t : 1665568580 , i : 7 } ) , t : Lo n g( \"1\" ) }, las t Commi tte dWallTime : 2022-10-12 T 09 : 56 : 20.382 Z , readCo n cer n Majori t yOpTime : { ts : Times ta mp( { t : 1665568580 , i : 7 } ) , t : Lo n g( \"1\" ) }, appliedOpTime : { ts : Times ta mp( { t : 1665568580 , i : 7 } ) , t : Lo n g( \"1\" ) }, durableOpTime : { ts : Times ta mp( { t : 1665568580 , i : 7 } ) , t : Lo n g( \"1\" ) }, las t AppliedWallTime : 2022-10-12 T 09 : 56 : 20.382 Z , las t DurableWallTime : 2022-10-12 T 09 : 56 : 20.382 Z }, las t S ta bleRecoveryTimes ta mp : Times ta mp( { t : 1665568522 , i : 1 } ) , elec t io n Ca n dida te Me tr ics : { las t Elec t io n Reaso n : 'elec t io n Timeou t ' , las t Elec t io n Da te : 2022-10-12 T 09 : 52 : 42.586 Z , elec t io n Term : Lo n g( \"1\" ) , las t Commi tte dOpTimeA t Elec t io n : { ts : Times ta mp( { t : 1665568351 , i : 1 } ) , t : Lo n g( \"-1\" ) }, las t See n OpTimeA t Elec t io n : { ts : Times ta mp( { t : 1665568351 , i : 1 } ) , t : Lo n g( \"-1\" ) }, nu mVo tes Needed : 2 , priori t yA t Elec t io n : 1 , elec t io n Timeou t Millis : Lo n g( \"10000\" ) , nu mCa t chUpOps : Lo n g( \"0\" ) , ne wTermS tart Da te : 2022-10-12 T 09 : 52 : 42.779 Z , wMajori t yWri te Availabili t yDa te : 2022-10-12 T 09 : 52 : 44.189 Z }, members : [ { _id : 0 , na me : 'mo n go 1 : 27017 ' , heal t h : 1 , s tate : 1 , s tate S tr : 'PRIMARY' , up t ime : 310 , op t ime : [ Objec t ], op t imeDa te : 2022-10-12 T 09 : 56 : 20.000 Z , las t AppliedWallTime : 2022-10-12 T 09 : 56 : 20.382 Z , las t DurableWallTime : 2022-10-12 T 09 : 56 : 20.382 Z , sy n cSourceHos t : '' , sy n cSourceId : -1 , i nf oMessage : '' , elec t io n Time : Times ta mp( { t : 1665568362 , i : 1 } ) , elec t io n Da te : 2022-10-12 T 09 : 52 : 42.000 Z , co nf igVersio n : 1 , co nf igTerm : 1 , sel f : true , las t Hear t bea t Message : '' }, { _id : 1 , na me : 'mo n go 2 : 27017 ' , heal t h : 1 , s tate : 2 , s tate S tr : 'SECONDARY' , up t ime : 229 , op t ime : [ Objec t ], op t imeDurable : [ Objec t ], op t imeDa te : 2022-10-12 T 09 : 56 : 20.000 Z , op t imeDurableDa te : 2022-10-12 T 09 : 56 : 20.000 Z , las t AppliedWallTime : 2022-10-12 T 09 : 56 : 20.382 Z , las t DurableWallTime : 2022-10-12 T 09 : 56 : 20.382 Z , las t Hear t bea t : 2022-10-12 T 09 : 56 : 20.778 Z , las t Hear t bea t Recv : 2022-10-12 T 09 : 56 : 20.316 Z , pi n gMs : Lo n g( \"0\" ) , las t Hear t bea t Message : '' , sy n cSourceHos t : 'mo n go 1 : 27017 ' , sy n cSourceId : 0 , i nf oMessage : '' , co nf igVersio n : 1 , co nf igTerm : 1 }, { _id : 2 , na me : 'mo n go 3 : 27017 ' , heal t h : 1 , s tate : 2 , s tate S tr : 'SECONDARY' , up t ime : 229 , op t ime : [ Objec t ], op t imeDurable : [ Objec t ], op t imeDa te : 2022-10-12 T 09 : 56 : 20.000 Z , op t imeDurableDa te : 2022-10-12 T 09 : 56 : 20.000 Z , las t AppliedWallTime : 2022-10-12 T 09 : 56 : 20.382 Z , las t DurableWallTime : 2022-10-12 T 09 : 56 : 20.382 Z , las t Hear t bea t : 2022-10-12 T 09 : 56 : 20.778 Z , las t Hear t bea t Recv : 2022-10-12 T 09 : 56 : 20.317 Z , pi n gMs : Lo n g( \"0\" ) , las t Hear t bea t Message : '' , sy n cSourceHos t : 'mo n go 1 : 27017 ' , sy n cSourceId : 0 , i nf oMessage : '' , co nf igVersio n : 1 , co nf igTerm : 1 } ], ok : 1 , '$clus ter Time' : { clus ter Time : Times ta mp( { t : 1665568580 , i : 7 } ) , sig nature : { hash : Bi nar y(Bu ffer . fr om( \"0000000000000000000000000000000000000000\" , \"hex\" ) , 0 ) , keyId : Lo n g( \"0\" ) } }, opera t io n Time : Times ta mp( { t : 1665568580 , i : 7 } ) } Test du Replica Set \u00b6 Test des op\u00e9rations de lecture/\u00e9criture \u00b6 Essayer les op\u00e9rations suivantes : Se connecter au serveur primaire et cr\u00e9er une base de donn\u00e9es 'Courrier' en suivant les \u00e9tapes suivantes : > use courrier > db . createCollection ( 'mail' ) > db . mail . insert ({ from : 'support@mongodb.com' , subject : 'Replica Set Testing' , body : 'OK' }) Se connecter aux serveurs secondaires et v\u00e9rifier le contenu de la base : > use courrier > db . mail . find () Pour \u00e9viter cette erreur, ex\u00e9cuter > rs . slaveOk () ou > rs . secondaryOk () et r\u00e9essayer. V\u00e9rifier si l'insertion est possible depuis un serveur secondaire. Test de la reprise sur panne \u00b6 Pour simuler une panne : Se connecter au serveur primaire. Arr\u00eater le serveur et examiner le comportement du Replica Set (r\u00e9ponse aux requ\u00eate, \u00e9lection d'un nouveau serveur primaire). > use admin > db . shutdownServer () Le fichier oplog \u00b6 Le serveur primaire cr\u00e9e automatiquement une collection oplog.rs dans la base de donn\u00e9es local pour y enregistrer toutes les op\u00e9rations de mise \u00e0 jour. Les serveurs secondaires lisent r\u00e9guli\u00e8rement le fichier oplog pour r\u00e9pliquer les donn\u00e9es. Afficher le contenu de cette collection : > use local > db . oplog . rs . find (). pretty () Vous pouvez lire les informations suivantes : \"op\" : code op\u00e9ration \"ts\" : date et heure \"ns\" : collection concern\u00e9e Pour fixer la taille de ce fichier modifier le param\u00e8tre oplogSizeMB replication: oplogSizeMB: <taille en MB> Haute disponibilit\u00e9 et modes de lectures \u00b6 Pour am\u00e9liorer le temps de r\u00e9ponse des op\u00e9rations de lecture (l'\u00e9criture est exclusivement ex\u00e9cut\u00e9e sur le serveur primaire). Plusieurs modes d'ex\u00e9cution des lectures sont possibles \u00e0 travers le pram\u00e8tre localThresholdMS de la section replication \u00e0 savoir : Primary : valeur par d\u00e9faut, lecture sur le serveur d\u2019\u00e9criture. PrimaryPreferred : si jamais le PRIMARY n\u2019est plus disponible, les requ\u00eates sont rout\u00e9es vers le SECONDARY. Secondary : Rout\u00e9 uniquement sur les SECONDARY. Nearest : Le serveur physique le plus proche sur le r\u00e9seau (latence la plus faible) est interrog\u00e9 directement par le client. D'autres param\u00e8tres permettent aussi d'influencer la haute disponibilit\u00e9 comme la priorit\u00e9 d'\u00e9lection de chaque serveurs et le param\u00e8tre readConcern. Se connecter au primary docker exec -it mongo1 mongosh Lire avec diff\u00e9rents modes use courrier ; db . mail . find (). readPref ( 'primary' ); db . mail . find (). readPref ( 'secondary' ); db . mail . find (). readPref ( 'primaryPreferred' ); db . mail . find (). readPref ( 'secondaryPreferred' ); Se connecter \u00e0 un noeud secondaire et lire avec diff\u00e9rents modes docker exec -it mongo2 mongosh puis use courrier ; db . mail . find (). readPref ( 'primary' ); db . mail . find (). readPref ( 'secondary' ); db . mail . find (). readPref ( 'primaryPreferred' ); db . mail . find (). readPref ( 'secondaryPreferred' );","title":"Replication"},{"location":"replication.html#replication-dans-mongodb","text":"","title":"R\u00e9plication Dans MongoDB"},{"location":"replication.html#definition","text":"La r\u00e9plication est une technique commune aux syst\u00e8mes NoSQL pour assurer la s\u00e9curit\u00e9 et la reprise apr\u00e8s les pannes. Elle consiste \u00e0 cr\u00e9er des copies des donn\u00e9es sur des serveurs diff\u00e9rents pouvant remplacer le serveur en cas de panne.","title":"D\u00e9finition"},{"location":"replication.html#principe-du-replica-set","text":"Un Replica Set est un groupe de serveurs mongod qui g\u00e8rent les m\u00eames donn\u00e9es. Il est compos\u00e9 d'un unique serveur primaire (ma\u00eetre) et de plusieurs serveurs secondaires (esclaves). Le serveur primaire r\u00e9pond aux demandes du (lecture/\u00e9criture) client (driver). Le client peut \u00e9galement lire \u00e0 partir des serveurs secondaires. Les serveurs secondaires reproduisent les m\u00eames op\u00e9rations (\u00e9critures) r\u00e9alis\u00e9es au niveau du serveur primaire. Si le serveur primaire est indisponible, un serveur secondaire est promu en primaire apr\u00e8s une proc\u00e9dure d'\u00e9lection. Si le nombre de serveurs est pair, un serveur arbitre est ajout\u00e9. Le nombre minimal de serveurs est de 3 et ils peuvent atteindre 50. 7 serveurs au maximum peuvent participer \u00e0 une \u00e9lection.","title":"Principe du Replica Set"},{"location":"replication.html#mise-en-place-dun-replica-set-avec-docker","text":"La cr\u00e9ation d'un cluster de 3 noeuds avec Docker consiste \u00e0 r\u00e9aliser les 3 \u00e9tapes suivantes : Cr\u00e9er un r\u00e9seau Docker pour interconnecter les containers D\u00e9marrer 3 instances de MongoDB Initier le Replica Set Cr\u00e9er un r\u00e9seau docker docker network create mongoCluster D\u00e9marrer les 3 containers MongoDB docker run -d -p 27017 :27017 --name mongo1 --network mongoCluster mongo:6.0.1 mongod --replSet rs1 --bind_ip localhost,mongo1 docker run -d -p 27018 :27017 --name mongo2 --network mongoCluster mongo:6.0.1 mongod --replSet rs1 --bind_ip localhost,mongo2 docker run -d -p 27019 :27017 --name mongo3 --network mongoCluster mongo:6.0.1 mongod --replSet rs1 --bind_ip localhost,mongo3 Initier le Replica Set Se connecter \u00e0 mongo1 avec Compoass (mongodb://localhost:27017) Ex\u00e9cuter depuis le shell > rs . initiate ({ _id : \"rs1\" , members : [ { _id : 0 , host : \"mongo1\" }, { _id : 1 , host : \"mongo2\" }, { _id : 2 , host : \"mongo3\" } ] }) V\u00e9rifier le replica > rs . status () La r\u00e9ponse est similaire \u00e0 ce qui suit : { se t : 'rs 1 ' , da te : 2022-10-12 T 09 : 56 : 20.947 Z , myS tate : 1 , ter m : Lo n g( \"1\" ) , sy n cSourceHos t : '' , sy n cSourceId : -1 , hear t bea t I nter valMillis : Lo n g( \"2000\" ) , majori t yVo te Cou nt : 2 , wri te Majori t yCou nt : 2 , vo t i n gMembersCou nt : 3 , wri ta bleVo t i n gMembersCou nt : 3 , op t imes : { las t Commi tte dOpTime : { ts : Times ta mp( { t : 1665568580 , i : 7 } ) , t : Lo n g( \"1\" ) }, las t Commi tte dWallTime : 2022-10-12 T 09 : 56 : 20.382 Z , readCo n cer n Majori t yOpTime : { ts : Times ta mp( { t : 1665568580 , i : 7 } ) , t : Lo n g( \"1\" ) }, appliedOpTime : { ts : Times ta mp( { t : 1665568580 , i : 7 } ) , t : Lo n g( \"1\" ) }, durableOpTime : { ts : Times ta mp( { t : 1665568580 , i : 7 } ) , t : Lo n g( \"1\" ) }, las t AppliedWallTime : 2022-10-12 T 09 : 56 : 20.382 Z , las t DurableWallTime : 2022-10-12 T 09 : 56 : 20.382 Z }, las t S ta bleRecoveryTimes ta mp : Times ta mp( { t : 1665568522 , i : 1 } ) , elec t io n Ca n dida te Me tr ics : { las t Elec t io n Reaso n : 'elec t io n Timeou t ' , las t Elec t io n Da te : 2022-10-12 T 09 : 52 : 42.586 Z , elec t io n Term : Lo n g( \"1\" ) , las t Commi tte dOpTimeA t Elec t io n : { ts : Times ta mp( { t : 1665568351 , i : 1 } ) , t : Lo n g( \"-1\" ) }, las t See n OpTimeA t Elec t io n : { ts : Times ta mp( { t : 1665568351 , i : 1 } ) , t : Lo n g( \"-1\" ) }, nu mVo tes Needed : 2 , priori t yA t Elec t io n : 1 , elec t io n Timeou t Millis : Lo n g( \"10000\" ) , nu mCa t chUpOps : Lo n g( \"0\" ) , ne wTermS tart Da te : 2022-10-12 T 09 : 52 : 42.779 Z , wMajori t yWri te Availabili t yDa te : 2022-10-12 T 09 : 52 : 44.189 Z }, members : [ { _id : 0 , na me : 'mo n go 1 : 27017 ' , heal t h : 1 , s tate : 1 , s tate S tr : 'PRIMARY' , up t ime : 310 , op t ime : [ Objec t ], op t imeDa te : 2022-10-12 T 09 : 56 : 20.000 Z , las t AppliedWallTime : 2022-10-12 T 09 : 56 : 20.382 Z , las t DurableWallTime : 2022-10-12 T 09 : 56 : 20.382 Z , sy n cSourceHos t : '' , sy n cSourceId : -1 , i nf oMessage : '' , elec t io n Time : Times ta mp( { t : 1665568362 , i : 1 } ) , elec t io n Da te : 2022-10-12 T 09 : 52 : 42.000 Z , co nf igVersio n : 1 , co nf igTerm : 1 , sel f : true , las t Hear t bea t Message : '' }, { _id : 1 , na me : 'mo n go 2 : 27017 ' , heal t h : 1 , s tate : 2 , s tate S tr : 'SECONDARY' , up t ime : 229 , op t ime : [ Objec t ], op t imeDurable : [ Objec t ], op t imeDa te : 2022-10-12 T 09 : 56 : 20.000 Z , op t imeDurableDa te : 2022-10-12 T 09 : 56 : 20.000 Z , las t AppliedWallTime : 2022-10-12 T 09 : 56 : 20.382 Z , las t DurableWallTime : 2022-10-12 T 09 : 56 : 20.382 Z , las t Hear t bea t : 2022-10-12 T 09 : 56 : 20.778 Z , las t Hear t bea t Recv : 2022-10-12 T 09 : 56 : 20.316 Z , pi n gMs : Lo n g( \"0\" ) , las t Hear t bea t Message : '' , sy n cSourceHos t : 'mo n go 1 : 27017 ' , sy n cSourceId : 0 , i nf oMessage : '' , co nf igVersio n : 1 , co nf igTerm : 1 }, { _id : 2 , na me : 'mo n go 3 : 27017 ' , heal t h : 1 , s tate : 2 , s tate S tr : 'SECONDARY' , up t ime : 229 , op t ime : [ Objec t ], op t imeDurable : [ Objec t ], op t imeDa te : 2022-10-12 T 09 : 56 : 20.000 Z , op t imeDurableDa te : 2022-10-12 T 09 : 56 : 20.000 Z , las t AppliedWallTime : 2022-10-12 T 09 : 56 : 20.382 Z , las t DurableWallTime : 2022-10-12 T 09 : 56 : 20.382 Z , las t Hear t bea t : 2022-10-12 T 09 : 56 : 20.778 Z , las t Hear t bea t Recv : 2022-10-12 T 09 : 56 : 20.317 Z , pi n gMs : Lo n g( \"0\" ) , las t Hear t bea t Message : '' , sy n cSourceHos t : 'mo n go 1 : 27017 ' , sy n cSourceId : 0 , i nf oMessage : '' , co nf igVersio n : 1 , co nf igTerm : 1 } ], ok : 1 , '$clus ter Time' : { clus ter Time : Times ta mp( { t : 1665568580 , i : 7 } ) , sig nature : { hash : Bi nar y(Bu ffer . fr om( \"0000000000000000000000000000000000000000\" , \"hex\" ) , 0 ) , keyId : Lo n g( \"0\" ) } }, opera t io n Time : Times ta mp( { t : 1665568580 , i : 7 } ) }","title":"Mise en place d'un Replica Set avec Docker "},{"location":"replication.html#test-du-replica-set","text":"","title":"Test du Replica Set"},{"location":"replication.html#test-des-operations-de-lectureecriture","text":"Essayer les op\u00e9rations suivantes : Se connecter au serveur primaire et cr\u00e9er une base de donn\u00e9es 'Courrier' en suivant les \u00e9tapes suivantes : > use courrier > db . createCollection ( 'mail' ) > db . mail . insert ({ from : 'support@mongodb.com' , subject : 'Replica Set Testing' , body : 'OK' }) Se connecter aux serveurs secondaires et v\u00e9rifier le contenu de la base : > use courrier > db . mail . find () Pour \u00e9viter cette erreur, ex\u00e9cuter > rs . slaveOk () ou > rs . secondaryOk () et r\u00e9essayer. V\u00e9rifier si l'insertion est possible depuis un serveur secondaire.","title":"Test des op\u00e9rations de lecture/\u00e9criture"},{"location":"replication.html#test-de-la-reprise-sur-panne","text":"Pour simuler une panne : Se connecter au serveur primaire. Arr\u00eater le serveur et examiner le comportement du Replica Set (r\u00e9ponse aux requ\u00eate, \u00e9lection d'un nouveau serveur primaire). > use admin > db . shutdownServer ()","title":"Test de la reprise sur panne"},{"location":"replication.html#le-fichier-oplog","text":"Le serveur primaire cr\u00e9e automatiquement une collection oplog.rs dans la base de donn\u00e9es local pour y enregistrer toutes les op\u00e9rations de mise \u00e0 jour. Les serveurs secondaires lisent r\u00e9guli\u00e8rement le fichier oplog pour r\u00e9pliquer les donn\u00e9es. Afficher le contenu de cette collection : > use local > db . oplog . rs . find (). pretty () Vous pouvez lire les informations suivantes : \"op\" : code op\u00e9ration \"ts\" : date et heure \"ns\" : collection concern\u00e9e Pour fixer la taille de ce fichier modifier le param\u00e8tre oplogSizeMB replication: oplogSizeMB: <taille en MB>","title":"Le fichier oplog"},{"location":"replication.html#haute-disponibilite-et-modes-de-lectures","text":"Pour am\u00e9liorer le temps de r\u00e9ponse des op\u00e9rations de lecture (l'\u00e9criture est exclusivement ex\u00e9cut\u00e9e sur le serveur primaire). Plusieurs modes d'ex\u00e9cution des lectures sont possibles \u00e0 travers le pram\u00e8tre localThresholdMS de la section replication \u00e0 savoir : Primary : valeur par d\u00e9faut, lecture sur le serveur d\u2019\u00e9criture. PrimaryPreferred : si jamais le PRIMARY n\u2019est plus disponible, les requ\u00eates sont rout\u00e9es vers le SECONDARY. Secondary : Rout\u00e9 uniquement sur les SECONDARY. Nearest : Le serveur physique le plus proche sur le r\u00e9seau (latence la plus faible) est interrog\u00e9 directement par le client. D'autres param\u00e8tres permettent aussi d'influencer la haute disponibilit\u00e9 comme la priorit\u00e9 d'\u00e9lection de chaque serveurs et le param\u00e8tre readConcern. Se connecter au primary docker exec -it mongo1 mongosh Lire avec diff\u00e9rents modes use courrier ; db . mail . find (). readPref ( 'primary' ); db . mail . find (). readPref ( 'secondary' ); db . mail . find (). readPref ( 'primaryPreferred' ); db . mail . find (). readPref ( 'secondaryPreferred' ); Se connecter \u00e0 un noeud secondaire et lire avec diff\u00e9rents modes docker exec -it mongo2 mongosh puis use courrier ; db . mail . find (). readPref ( 'primary' ); db . mail . find (). readPref ( 'secondary' ); db . mail . find (). readPref ( 'primaryPreferred' ); db . mail . find (). readPref ( 'secondaryPreferred' );","title":"Haute disponibilit\u00e9 et modes de lectures"},{"location":"sharding.html","text":"MongDB Sharding \u00b6 D\u00e9finition \u00b6 C'est une m\u00e9thode de distribution des donn\u00e9es sur plusieurs machines (cluster). Elle permet \u00e0 MongoDB de passer \u00e0 l'\u00e9chelle pour accueillir des bases de donn\u00e9es massives avec un d\u00e9bit tr\u00e8s important. Elle fait partie des techniques de mise \u00e0 l'\u00e9chelle horizontale : Horizontal scaling . shard : \u00e9clat, tesson (fragment) Principe de fonctionnement \u00b6 Le cluster est compos\u00e9 de 3 types de serveurs : mongos : routeur pour l'acheminement des requ\u00eates. Config Server : enregistre les m\u00e9tadonn\u00e9es sur et la configuration pour le cluster. Shard : contient un sous ensemble des donn\u00e9es (chunk ou partition) qui peut \u00eatre d\u00e9ploy\u00e9 comme Replica Set. La distribution des donn\u00e9es sur le cluster est bas\u00e9e sur une cl\u00e9 shard key . La cl\u00e9 peut \u00eatre un ou plusieurs champs. Elle est utilis\u00e9e dans l'une des deux strat\u00e9gies de distribution : Hashed Sharding : un hash de cl\u00e9 d\u00e9termine quelle dans quelle chunk mettre les donn\u00e9es. Ranged Sharding : la cl\u00e9 est affect\u00e9 \u00e0 un chunk selon valeur. Hashed Sharding Ranged Sharding R\u00e9plication et Sharding avec Docker \u00b6 Le cluster \u00e0 mettre en place est comps\u00e9e des noeuds suivants : 2 Mongos (router): routage des requ\u00eates vers les shards. router01 router02 3 Config Servers : enregistre les m\u00e9tadonn\u00e9es de la configuration du cluster configsvr01 configsvr02 configsvr03 3 Shards (avec un replica set de 3 membres) : d\u00e9tient une partie (shard) des donn\u00e9es. shard01-a , shard01-b , shard01-c shard02-a , shard02-b , shard02-c shard03-a , shard03-b , shard03-c docker-compose sera utilis\u00e9 pour automatiser la gestion des diff\u00e9rents containers (14 dans notre cas). Les fichiers n\u00e9cessaires \u00e0 cette manipulation sont mis dans cette archive mongodb-cluster.zip que vous devez t\u00e9l\u00e9charger et d\u00e9compresser. Vous obtiendrez un dossier contenant : docker-compose.yaml qui contient les param\u00e8tres des diff\u00e9rents containers : version : '3' services : # Router ## router 01 router01 : image : mongo:6.0.1 container_name : router-01 command : | mongos --port 27017 --configdb rs-config-server/configsvr01:27017,configsvr02:27017,configsvr03:27017 --bind_ip_all ports : - 27117:27017 volumes : - ./scripts:/scripts ## router 02 router02 : image : mongo:6.0.1 container_name : router-02 command : | mongos --port 27017 --configdb rs-config-server/configsvr01:27017,configsvr02:27017,configsvr03:27017 --bind_ip_all volumes : - ./scripts:/scripts ports : - 27118:27017 links : - router01 # Config Servers ## Config server 01 configsvr01 : image : mongo:6.0.1 container_name : mongo-config-01 command : | mongod --port 27017 --configsvr --replSet rs-config-server volumes : - ./scripts:/scripts ports : - 27119:27017 links : - shard01-a - shard02-a - shard03-a ## Config server 02 configsvr02 : image : mongo:6.0.1 container_name : mongo-config-02 command : | mongod --port 27017 --configsvr --replSet rs-config-server volumes : - ./scripts:/scripts ports : - 27120:27017 links : - configsvr01 ## Config server 03 configsvr03 : image : mongo:6.0.1 container_name : mongo-config-03 command : | mongod --port 27017 --configsvr --replSet rs-config-server volumes : - ./scripts:/scripts ports : - 27121:27017 links : - configsvr02 # Shards ## Shards 01 shard01-a : image : mongo:6.0.1 container_name : shard-01-a command : | mongod --port 27017 --shardsvr --replSet rs-shard-01 volumes : - ./scripts:/scripts ports : - 27122:27017 links : - shard01-b - shard01-c shard01-b : image : mongo:6.0.1 container_name : shard-01-b command : | mongod --port 27017 --shardsvr --replSet rs-shard-01 volumes : - ./scripts:/scripts ports : - 27123:27017 shard01-c : image : mongo:6.0.1 container_name : shard-01-c command : | mongod --port 27017 --shardsvr --replSet rs-shard-01 volumes : - ./scripts:/scripts ports : - 27124:27017 ## Shards 02 shard02-a : image : mongo:6.0.1 container_name : shard-02-a command : | mongod --port 27017 --shardsvr --replSet rs-shard-02 volumes : - ./scripts:/scripts ports : - 27125:27017 links : - shard02-b - shard02-c shard02-b : image : mongo:6.0.1 container_name : shard-02-b command : | mongod --port 27017 --shardsvr --replSet rs-shard-02 volumes : - ./scripts:/scripts ports : - 27126:27017 shard02-c : image : mongo:6.0.1 container_name : shard-02-c command : | mongod --port 27017 --shardsvr --replSet rs-shard-02 volumes : - ./scripts:/scripts ports : - 27127:27017 ## Shards 03 shard03-a : image : mongo:6.0.1 container_name : shard-03-a command : | mongod --port 27017 --shardsvr --replSet rs-shard-03 volumes : - ./scripts:/scripts ports : - 27128:27017 links : - shard03-b - shard03-c shard03-b : image : mongo:6.0.1 container_name : shard-03-b command : | mongod --port 27017 --shardsvr --replSet rs-shard-03 volumes : - ./scripts:/scripts ports : - 27129:27017 shard03-c : image : mongo:6.0.1 container_name : shard-03-c command : | mongod --port 27017 --shardsvr --replSet rs-shard-03 volumes : - ./scripts:/scripts ports : - 27130:27017 Un dossier scripts :fontawesome-icons-folder: contenant les scripts d'initialisation de replica set et shards, les routeurs et les serveurs de configuration. D\u00e9marrer la pile de containers docker-compose up -d Initialiser les serveurs de configuration docker-compose exec configsvr01 sh -c \"mongosh < /scripts/configserver.js\" Initialiser les shards docker-compose exec shard01-a sh -c \"mongosh < /scripts/replicaset_1.js\" docker-compose exec shard02-a sh -c \"mongosh < /scripts/replicaset_2.js\" docker-compose exec shard03-a sh -c \"mongosh < /scripts/replicaset_3.js\" Attendre l'\u00e9lection des primary puis initialiser les routeurs docker-compose exec router01 sh -c \"mongosh < /scripts/router.js\" V\u00e9rifier le cluster : V\u00e9rifier la r\u00e9plication docker-compose exec shard-01-a mongosh et ensuite rs . status () V\u00e9rifier les shards docker-compose exec router01 mongosh et ensuite sh . status () Distribuer une base de donn\u00e9es Cr\u00e9er une nouvelle base et nouvelle collection. Puis cr\u00e9er un index sur _id. > use testDB ; > sh . enableSharding ( \"testDB\" ); > db . createCollection ( \"test\" ); > db . test . createIndex ({ \"_id\" : 1 }); > sh . shardCollection ( \"testDB.test\" ,{ \"_id\" : 1 }); - Importer un dataset et v\u00e9rifier l'\u00e9tat du Sharding. Terminal mongoimport -d testDB -c test --port 26000 restaurants.json mongo --port 26000 --eval \"sh.status()\" Attention Les requ\u00eates sont destin\u00e9es au routeur. Inspecter les propri\u00e9t\u00e9s et d\u00e9terminer : La cl\u00e9 de sharding Le nombre de shunks par shard Isolation et coh\u00e9rence \u00b6 Dans ce quit, nous configurons les niveaux de coh\u00e9rence avec les param\u00e8tres readConcern et writeConcern . Se connecter \u00e0 un routeur docker-compose exec -it router01 mongosh readConcern use testdb ; db . test . find ({}). readConcern ({ \"level\" : \"majority\" }); writeConcern try { db . test . updateMany ( { \"name\" : \"Pizza Rat's Pizzaria\" }, { $inc : { \"violations\" : 3 }, $set : { \"Closed\" : true } }, { w : \"majority\" , wtimeout : 100 } ); } catch ( e ) { print ( e ); }","title":"Sharding"},{"location":"sharding.html#mongdb-sharding","text":"","title":"MongDB Sharding"},{"location":"sharding.html#definition","text":"C'est une m\u00e9thode de distribution des donn\u00e9es sur plusieurs machines (cluster). Elle permet \u00e0 MongoDB de passer \u00e0 l'\u00e9chelle pour accueillir des bases de donn\u00e9es massives avec un d\u00e9bit tr\u00e8s important. Elle fait partie des techniques de mise \u00e0 l'\u00e9chelle horizontale : Horizontal scaling . shard : \u00e9clat, tesson (fragment)","title":"D\u00e9finition"},{"location":"sharding.html#principe-de-fonctionnement","text":"Le cluster est compos\u00e9 de 3 types de serveurs : mongos : routeur pour l'acheminement des requ\u00eates. Config Server : enregistre les m\u00e9tadonn\u00e9es sur et la configuration pour le cluster. Shard : contient un sous ensemble des donn\u00e9es (chunk ou partition) qui peut \u00eatre d\u00e9ploy\u00e9 comme Replica Set. La distribution des donn\u00e9es sur le cluster est bas\u00e9e sur une cl\u00e9 shard key . La cl\u00e9 peut \u00eatre un ou plusieurs champs. Elle est utilis\u00e9e dans l'une des deux strat\u00e9gies de distribution : Hashed Sharding : un hash de cl\u00e9 d\u00e9termine quelle dans quelle chunk mettre les donn\u00e9es. Ranged Sharding : la cl\u00e9 est affect\u00e9 \u00e0 un chunk selon valeur. Hashed Sharding Ranged Sharding","title":"Principe de fonctionnement"},{"location":"sharding.html#replication-et-sharding-avec-docker","text":"Le cluster \u00e0 mettre en place est comps\u00e9e des noeuds suivants : 2 Mongos (router): routage des requ\u00eates vers les shards. router01 router02 3 Config Servers : enregistre les m\u00e9tadonn\u00e9es de la configuration du cluster configsvr01 configsvr02 configsvr03 3 Shards (avec un replica set de 3 membres) : d\u00e9tient une partie (shard) des donn\u00e9es. shard01-a , shard01-b , shard01-c shard02-a , shard02-b , shard02-c shard03-a , shard03-b , shard03-c docker-compose sera utilis\u00e9 pour automatiser la gestion des diff\u00e9rents containers (14 dans notre cas). Les fichiers n\u00e9cessaires \u00e0 cette manipulation sont mis dans cette archive mongodb-cluster.zip que vous devez t\u00e9l\u00e9charger et d\u00e9compresser. Vous obtiendrez un dossier contenant : docker-compose.yaml qui contient les param\u00e8tres des diff\u00e9rents containers : version : '3' services : # Router ## router 01 router01 : image : mongo:6.0.1 container_name : router-01 command : | mongos --port 27017 --configdb rs-config-server/configsvr01:27017,configsvr02:27017,configsvr03:27017 --bind_ip_all ports : - 27117:27017 volumes : - ./scripts:/scripts ## router 02 router02 : image : mongo:6.0.1 container_name : router-02 command : | mongos --port 27017 --configdb rs-config-server/configsvr01:27017,configsvr02:27017,configsvr03:27017 --bind_ip_all volumes : - ./scripts:/scripts ports : - 27118:27017 links : - router01 # Config Servers ## Config server 01 configsvr01 : image : mongo:6.0.1 container_name : mongo-config-01 command : | mongod --port 27017 --configsvr --replSet rs-config-server volumes : - ./scripts:/scripts ports : - 27119:27017 links : - shard01-a - shard02-a - shard03-a ## Config server 02 configsvr02 : image : mongo:6.0.1 container_name : mongo-config-02 command : | mongod --port 27017 --configsvr --replSet rs-config-server volumes : - ./scripts:/scripts ports : - 27120:27017 links : - configsvr01 ## Config server 03 configsvr03 : image : mongo:6.0.1 container_name : mongo-config-03 command : | mongod --port 27017 --configsvr --replSet rs-config-server volumes : - ./scripts:/scripts ports : - 27121:27017 links : - configsvr02 # Shards ## Shards 01 shard01-a : image : mongo:6.0.1 container_name : shard-01-a command : | mongod --port 27017 --shardsvr --replSet rs-shard-01 volumes : - ./scripts:/scripts ports : - 27122:27017 links : - shard01-b - shard01-c shard01-b : image : mongo:6.0.1 container_name : shard-01-b command : | mongod --port 27017 --shardsvr --replSet rs-shard-01 volumes : - ./scripts:/scripts ports : - 27123:27017 shard01-c : image : mongo:6.0.1 container_name : shard-01-c command : | mongod --port 27017 --shardsvr --replSet rs-shard-01 volumes : - ./scripts:/scripts ports : - 27124:27017 ## Shards 02 shard02-a : image : mongo:6.0.1 container_name : shard-02-a command : | mongod --port 27017 --shardsvr --replSet rs-shard-02 volumes : - ./scripts:/scripts ports : - 27125:27017 links : - shard02-b - shard02-c shard02-b : image : mongo:6.0.1 container_name : shard-02-b command : | mongod --port 27017 --shardsvr --replSet rs-shard-02 volumes : - ./scripts:/scripts ports : - 27126:27017 shard02-c : image : mongo:6.0.1 container_name : shard-02-c command : | mongod --port 27017 --shardsvr --replSet rs-shard-02 volumes : - ./scripts:/scripts ports : - 27127:27017 ## Shards 03 shard03-a : image : mongo:6.0.1 container_name : shard-03-a command : | mongod --port 27017 --shardsvr --replSet rs-shard-03 volumes : - ./scripts:/scripts ports : - 27128:27017 links : - shard03-b - shard03-c shard03-b : image : mongo:6.0.1 container_name : shard-03-b command : | mongod --port 27017 --shardsvr --replSet rs-shard-03 volumes : - ./scripts:/scripts ports : - 27129:27017 shard03-c : image : mongo:6.0.1 container_name : shard-03-c command : | mongod --port 27017 --shardsvr --replSet rs-shard-03 volumes : - ./scripts:/scripts ports : - 27130:27017 Un dossier scripts :fontawesome-icons-folder: contenant les scripts d'initialisation de replica set et shards, les routeurs et les serveurs de configuration. D\u00e9marrer la pile de containers docker-compose up -d Initialiser les serveurs de configuration docker-compose exec configsvr01 sh -c \"mongosh < /scripts/configserver.js\" Initialiser les shards docker-compose exec shard01-a sh -c \"mongosh < /scripts/replicaset_1.js\" docker-compose exec shard02-a sh -c \"mongosh < /scripts/replicaset_2.js\" docker-compose exec shard03-a sh -c \"mongosh < /scripts/replicaset_3.js\" Attendre l'\u00e9lection des primary puis initialiser les routeurs docker-compose exec router01 sh -c \"mongosh < /scripts/router.js\" V\u00e9rifier le cluster : V\u00e9rifier la r\u00e9plication docker-compose exec shard-01-a mongosh et ensuite rs . status () V\u00e9rifier les shards docker-compose exec router01 mongosh et ensuite sh . status () Distribuer une base de donn\u00e9es Cr\u00e9er une nouvelle base et nouvelle collection. Puis cr\u00e9er un index sur _id. > use testDB ; > sh . enableSharding ( \"testDB\" ); > db . createCollection ( \"test\" ); > db . test . createIndex ({ \"_id\" : 1 }); > sh . shardCollection ( \"testDB.test\" ,{ \"_id\" : 1 }); - Importer un dataset et v\u00e9rifier l'\u00e9tat du Sharding. Terminal mongoimport -d testDB -c test --port 26000 restaurants.json mongo --port 26000 --eval \"sh.status()\" Attention Les requ\u00eates sont destin\u00e9es au routeur. Inspecter les propri\u00e9t\u00e9s et d\u00e9terminer : La cl\u00e9 de sharding Le nombre de shunks par shard","title":"R\u00e9plication et Sharding avec Docker"},{"location":"sharding.html#isolation-et-coherence","text":"Dans ce quit, nous configurons les niveaux de coh\u00e9rence avec les param\u00e8tres readConcern et writeConcern . Se connecter \u00e0 un routeur docker-compose exec -it router01 mongosh readConcern use testdb ; db . test . find ({}). readConcern ({ \"level\" : \"majority\" }); writeConcern try { db . test . updateMany ( { \"name\" : \"Pizza Rat's Pizzaria\" }, { $inc : { \"violations\" : 3 }, $set : { \"Closed\" : true } }, { w : \"majority\" , wtimeout : 100 } ); } catch ( e ) { print ( e ); }","title":"Isolation et coh\u00e9rence"}]}